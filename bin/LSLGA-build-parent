#!/usr/bin/env python

"""Generate the parent sample of large galaxies.

from LSLGA.io import read_parent
ss = read_parent(verbose=True)
gnum = ss['GROUP_ID']
npergrp, _ = np.histogram(gnum, bins=len(gnum), range=(0, len(gnum)))
print('Found {} total groups, including:'.format(len(set(gnum))))
print('  {} groups with 1 member'.format(np.sum( (npergrp == 1) ).astype('int')))
print('  {} groups with 2 members'.format(np.sum( (npergrp == 2) ).astype('int')))
print('  {} group(s) with 3-5 members'.format(np.sum( (npergrp >= 3)*(npergrp <= 5) ).astype('int')))
print('  {} group(s) with 6-10 members'.format(np.sum( (npergrp >= 6)*(npergrp <= 10) ).astype('int')))
print('  {} group(s) with >10 members'.format(np.sum( (npergrp > 10) ).astype('int')))

"""
import os, sys, time, pdb
import numpy as np
import matplotlib.pyplot as plt

import fitsio
from astropy.table import Table, Column, vstack, join
from astrometry.libkd.spherematch import tree_build_radec, tree_search_radec, match_radec

import LSLGA.io
from legacyhalos.misc import viewer_inspect, imagetool_inspect

sampledir = LSLGA.io.sample_dir()
qadir = os.path.join(LSLGA.io.sample_dir(), 'qa')

def add_ngc(parent, startindx=4000000):
    """Add in missing NGC galaxies.

    """
    import numpy.ma as ma
    from astropy.io import ascii
    from astrometry.util.starutil_numpy import hmsstring2ra, dmsstring2dec    

    # "Fix" the NGC and IC galaxy names in the parent catalog so we can match,
    # below--
    indx = np.where(['NGC' in gg for gg in parent['GALAXY']])[0]
    for ii in indx:
        gg = parent['GALAXY'][ii]
        gg = gg.strip()
        if len(gg) >= 7: # OK
            if len(gg) > 7:
                #print(gg) # e.g., NGC1097A
                pass
            continue
        else:
            newgg = 'NGC{:04d}'.format(np.int(gg[3:]))
            print('{}-->{}'.format(gg, newgg))
            parent['GALAXY'][ii] = newgg

    indx = np.where(['IC' in gg for gg in parent['GALAXY']])[0]
    for ii in indx:
        gg = parent['GALAXY'][ii]
        gg = gg.strip()
        if len(gg) >= 6: # OK
            if len(gg) > 6:
                #print(gg) # e.g., IC1097A
                pass
            continue
        else:
            newgg = 'IC{:04d}'.format(np.int(gg[2:]))
            print('{}-->{}'.format(gg, newgg))
            parent['GALAXY'][ii] = newgg

    # Now read the OpenNGC catalog--
    names = ('name', 'type', 'ra_hms', 'dec_dms', 'const', 'majax', 'minax',
             'pa', 'bmag', 'vmag', 'jmag', 'hmag', 'kmag', 'sbrightn', 'hubble',
             'cstarumag', 'cstarbmag', 'cstarvmag', 'messier', 'ngc', 'ic',
             'cstarnames', 'identifiers', 'commonnames', 'nednotes', 'ongcnotes')
    NGCfile = os.path.join(sampledir, 'catalogs', 'NGC.csv')
    NGC = ascii.read(NGCfile, delimiter=';', names=names)
    print('Read {} galaxies from {}'.format(len(NGC), NGCfile))

    for col in NGC.colnames:
        NGC.rename_column(col, col.upper())

    NGC.add_column(Column(name='ID', data=startindx + np.arange(len(NGC))), index=0)
    NGC = NGC[(NGC['RA_HMS'] != 'N/A')]
    NGC['BYHAND'] = np.zeros(len(NGC), bool)

    ra, dec = [], []
    for _ra, _dec in zip(ma.getdata(NGC['RA_HMS']), ma.getdata(NGC['DEC_DMS'])):
        ra.append(hmsstring2ra(_ra.replace('h', ':').replace('m', ':').replace('s','')))
        dec.append(dmsstring2dec(_dec.replace('d', ':').replace('m', ':').replace('s','')))
    NGC['RA'] = ra
    NGC['DEC'] = dec
    objtype = np.char.strip(ma.getdata(NGC['TYPE']))

    # after a ton of visual inspections, I've decided to *not* match against
    # galaxy pairs and triples: Hyperleda does seem to pick those up, albeit
    # with funky/wrong geometry sometimes
    NGC = NGC[np.where(['G' == typ for typ in objtype])[0]]
    #NGC = NGC[np.where(['G' in typ and typ != 'GCl' for typ in objtype])[0]]
    NGC.remove_column('TYPE') # to not conflict with parent, below
    NGC.rename_column('HUBBLE', 'TYPE')

    keep = np.where([not 'NED' in nn for nn in NGC['NAME']])[0]
    NGC = NGC[keep]

    print('Cutting to {} NGC galaxies with good coordinates.'.format(len(NGC)))

    # Match against parent--what's missing?
    m1, m2, d12 = match_radec(parent['RA'], parent['DEC'], NGC['RA'], NGC['DEC'], 30/3600.0, nearest=True)
    print('Need to also check the matching objects!')

    # Remove objects for which we have better catalog parameters in the catalog
    # at this point.
    m2 = np.hstack([m2, np.hstack([np.where(NGC['NAME'] == 'IC0715SE')[0], # galaxy component
                                   np.where(NGC['NAME'] == 'IC4212')[0],   # better coords in Hyperleda
                                   np.where(NGC['NAME'] == 'NGC1484')[0],  # better coords in Hyperleda
                                   np.where(NGC['NAME'] == 'IC1636')[0],   # better coords in Hyperleda
                                   np.where(NGC['NAME'] == 'NGC2680')[0],  # duplicate with NGC2679?
                                   np.where(NGC['NAME'] == 'NGC2458')[0],  # already in Hyperleda
                                   np.where(NGC['NAME'] == 'NGC0292')[0],  # SMC - we don't want it
                                   np.where(NGC['NAME'] == 'NGC2363')[0],  # HII region
                                   np.where(NGC['NAME'] == 'IC2789')[0],   # tiny, reject
                                   np.where(NGC['NAME'] == 'IC3332')[0],   # star?
                                   np.where(NGC['NAME'] == 'IC3738')[0],   # tiny, reject
                                   np.where(NGC['NAME'] == 'NGC3387')[0],  # star?
                                   np.where(NGC['NAME'] == 'IC0436')[0],   # reject, no size / not in footprint
                                   np.where(NGC['NAME'] == 'NGC7556A')[0], # we already have NGC7556
                                   np.where(NGC['NAME'] == 'NGC7592C')[0], # we already have NGC7592
                                   np.where(NGC['NAME'] == 'NGC0554B')[0], # merged with NGC0554A?
                                   np.where(NGC['NAME'] == 'NGC4657')[0]   # HII region
                                   ])])
    missing = np.delete(np.arange(len(NGC)), m2)
    #_imagetool_inspect(NGC[missing])
    print('Keeping {} missing NGC galaxies.'.format(len(missing)))
    NGC = NGC[missing]

    #print('Temporarily add a prefix to the name.')
    #NGC['NAME'] = ['tmp-{}'.format(nn.strip().replace(' ', '_')) for nn in NGC['NAME']]

    #NGC = in_footprint(NGC)
    #NGC = NGC[NGC['IN_DESI']]
    #print('Cutting to {} missing galaxies in the DESI footprint.'.format(len(NGC)))
    
    #_imagetool_inspect(NGC)
    #pdb.set_trace()

    # Make the supplemental catalog "look" like the parent Hyperleda catalog.
    NGC.rename_column('NAME', 'GALAXY')
    NGC.rename_column('PA', 'PA_ORIG')
    
    NGC['D25'] = ma.getdata(NGC['MAJAX']).astype('f4') # [arcmin]
    NGC['MAG'] = ma.getdata(NGC['BMAG']).astype('f4')
    NGC['BA'] = np.ones(len(NGC), dtype='f4')
    NGC['PA'] = np.zeros(len(NGC), dtype='f4')

    good = np.where(np.logical_not(ma.getmask(NGC['MINAX'])))[0]
    NGC['BA'][good] = ma.getdata(NGC['MINAX'][good]) / NGC['D25'][good]

    good = np.where(np.logical_not(ma.getmask(NGC['PA_ORIG'])))[0]
    NGC['PA'][good] = ma.getdata(NGC['PA_ORIG'][good])

    print('Increasing D(25) by 30%')
    NGC['D25'] *= 1.3
    
    fix = np.where(NGC['GALAXY'] == 'IC2155')[0]
    if len(fix) > 0:
        NGC['D25'][fix] = 0.4 # eyeballed
        NGC['PA'][fix] = 10
        NGC['BA'][fix] = 0.5
        NGC['BYHAND'][fix] = True
    
    fix = np.where(NGC['GALAXY'] == 'IC2946')[0]
    if len(fix) > 0:
        NGC['D25'][fix] = 0.8
        NGC['PA'][fix] = 0.0
        NGC['BA'][fix] = 1.0
        NGC['BYHAND'][fix] = True
    
    fix = np.where(NGC['GALAXY'] == 'IC1249')[0]
    if len(fix) > 0:
        NGC['D25'][fix] = NGC['D25'][fix] * 1.5
        NGC['BYHAND'][fix] = True

    fix = np.where(NGC['GALAXY'] == 'IC3872')[0]
    if len(fix) > 0:
        NGC['D25'][fix] = NGC['D25'][fix] * 1.5
        NGC['BYHAND'][fix] = True

    fix = np.where(NGC['GALAXY'] == 'IC2676')[0]
    if len(fix) > 0:
        NGC['D25'][fix] = NGC['D25'][fix] * 1.5
        NGC['BYHAND'][fix] = True

    fix = np.where(NGC['GALAXY'] == 'IC3396')[0]
    if len(fix) > 0:
        NGC['PA'][fix] = 90
        NGC['D25'][fix] = 0.4
        NGC['BYHAND'][fix] = True

    fix = np.where(NGC['GALAXY'] == 'IC3655')[0]
    if len(fix) > 0:
        NGC['PA'][fix] = 90
        NGC['BA'][fix] = 1.0
        NGC['D25'][fix] = 0.6
        NGC['BYHAND'][fix] = True

    fix = np.where(NGC['GALAXY'] == 'IC4087')[0]
    if len(fix) > 0:
        NGC['PA'][fix] = 90
        NGC['BA'][fix] = 1.0
        NGC['D25'][fix] = 0.45
        NGC['BYHAND'][fix] = True

    fix = np.where(NGC['GALAXY'] == 'IC0113')[0]
    if len(fix) > 0:
        NGC['MAG'][fix] = 13.3 # Ks, from NED/2MASS
        NGC['BYHAND'][fix] = True

    fix = np.where(NGC['GALAXY'] == 'IC0463')[0]
    if len(fix) > 0:
        NGC['MAG'][fix] = 12.9 # Ks, from NED/2MASS
        NGC['BYHAND'][fix] = True

    fix = np.where(NGC['GALAXY'] == 'IC0921')[0]
    if len(fix) > 0:
        NGC['MAG'][fix] = 15.7 # i-band, from NED/SDSS
        NGC['BYHAND'][fix] = True

    fix = np.where(NGC['GALAXY'] == 'IC0931')[0]
    if len(fix) > 0:
        NGC['MAG'][fix] = 15.7 # z-band, from NED/SDSS
        NGC['BYHAND'][fix] = True

    fix = np.where(NGC['GALAXY'] == 'IC1798')[0]
    if len(fix) > 0:
        NGC['MAG'][fix] = 12.8 # Ks-band, from NED/2MASS
        NGC['BYHAND'][fix] = True

    fix = np.where(NGC['GALAXY'] == 'IC2144')[0]
    if len(fix) > 0:
        NGC['MAG'][fix] = 15.0 # no data, totally made up!
        NGC['BYHAND'][fix] = True

    fix = np.where(NGC['GALAXY'] == 'IC4277')[0]
    if len(fix) > 0:
        NGC['MAG'][fix] = 16.5 # J-band, from NED/2MASS
        NGC['BYHAND'][fix] = True
    
    fix = np.where(NGC['GALAXY'] == 'IC5153')[0]
    if len(fix) > 0:
        NGC['MAG'][fix] = 14.5 # Ks-band, from NED/2MASS
        NGC['BYHAND'][fix] = True
    
    fix = np.where(NGC['GALAXY'] == 'IC5299')[0]
    if len(fix) > 0:
        NGC['MAG'][fix] = 11.3 # Ks-band, from NED/2MASS
        NGC['BYHAND'][fix] = True
    
    fix = np.where(NGC['GALAXY'] == 'NGC0396')[0]
    if len(fix) > 0:
        NGC['MAG'][fix] = 13.0 # Ks-band, from NED/2MASS
        NGC['BYHAND'][fix] = True
    
    fix = np.where(NGC['GALAXY'] == 'NGC0704A')[0]
    if len(fix) > 0:
        NGC['MAG'][fix] = 13.8 # "visual", from NED
        NGC['BYHAND'][fix] = True
    
    fix = np.where(NGC['GALAXY'] == 'NGC7577')[0]
    if len(fix) > 0:
        NGC['MAG'][fix] = 12.6 # Ks-band, from NED/2MASS
        NGC['BYHAND'][fix] = True

    out = Table()
    for col in parent.colnames:
        out[col] = np.zeros(len(NGC), dtype=parent[col].dtype)
    for col in NGC.colnames:
        if col in out.colnames:
            out[col] = NGC[col]          
            
    #out['OBJTYPE'] = 'G'
    out['REF'] = 'OpenNGC'
    out['Z'] = -99.0

    assert(np.all(out['D25'] > 0))
    assert(np.all(out['MAG'] > 0))
    parent = vstack((parent, out))

    return parent
    
def add_rc3(parent, startindx=3000000):
    """Add in missing RC3 galaxies.

    """
    print('Supplementing the LSGLA with missing RC3 galaxies.')

    rc3file = os.path.join(sampledir, 'catalogs', 'rc3_parsed.fits.gz')
    rc3 = Table.read(rc3file)
    print('Read {} galaxies from {}'.format(len(rc3), rc3file))

    rc3.add_column(Column(name='ID', data=startindx + np.arange(len(rc3))), index=0)
    rc3.rename_column('PA', 'PA_ORIG')
    rc3['PA'] = np.zeros(len(rc3), dtype='f4')
    rc3['PA'] = rc3['PA_ORIG'].astype('f4') # int-->f4

    # Code used for visual inspections--
    if False:
        gal = np.array([gg.strip().replace(' ', '') for gg in rc3['NAME']])

        keep = np.where((rc3['D25_MAJ'] > 20/60.) *
                        (gal != 'SMC') * (gal != 'LMC') *
                        (gal != 'Fornax') *
                        (gal != 'Sculptor') *
                        (gal != 'UrsaMinor') *
                        (gal != 'Draco') *
                        (gal != 'Carina'))[0] 
        print('Keeping {}/{} galaxies with D(25)>20 arcsec'.format(len(keep), len(rc3)))
        rc3 = rc3[keep]

        # match on PGC number
        pgc = [np.int(pgc.replace('PGC', '').replace('a+b', '')) for pgc in rc3['PGC']]
        missing = np.logical_not(np.isin(pgc, parent['PGC']))

        rc3 = rc3[missing]
        rc3 = in_footprint(rc3)
        rc3 = rc3[rc3['IN_DESI']]
        print('Cutting to {} missing galaxies in the DESI footprint.'.format(len(rc3)))

        #m1, m2, d12 = match_radec(parent['RA'], parent['DEC'], rc3['RA'], rc3['DEC'], 10/3600.0, nearest=True)
        #missing = np.delete(np.arange(len(rc3)), m2)
        #rc3[missing]
        #_imagetool_inspect(rc3)

    # Add galaxies in by hand, based on visual inspection--
    keepgals = np.array([
        'ESO350-38',
        #'UGC504', # Hyperleda diameter fixed in fix_byhand()
        'ESO79-13', 'MCG-1-3-72', 'ESO296-11',
        'NGC526',
        'NGC596', 'UGCA20', 'NGC680', 'ESO298-39', 'NGC1097A',
        'ESO356-14',
        'ESO116-15',
        'ESO248-6',
        'NGC1382', 'ESO302-15',
        'ESO201-10',
        'ESO118-30',
        #'ESO119-23', # Hyperleda diameter fixed in fix_byhand()
        'ESO159-16',
        #'ESO488-31', # Hyperleda diameter fixed in fix_byhand()
        'UGC3694', 'UGC4528', 'MCG-1-25-6',
        'UGC5162',
        #'A0943+56', # Hyperleda diameter fixed in fix_byhand()
        'UGC5482',
        'MCG1-32-96',
        'NGC4858',
        #'MCG-1-33-83', # <<30 arcsec
        #'IC4212', # Hyperleda diameter fixed in fix_byhand()
        'NGC6050',
        #'ESO286-52', # in Hyperleda as NGC7012?
        'ESO288-40',
        'NGC7592', 
        'NGC7720', 
        'ESO192-11'])
    gal = np.array([gg.strip().replace(' ', '') for gg in rc3['NAME']])
    alt = np.array([gg.strip().replace(' ', '') for gg in rc3['ALTNAME']])

    keep = []
    for keepgal in keepgals:
        ww = np.where(keepgal == gal)[0]
        if len(ww) == 0:
            ww = np.where(keepgal == alt)[0]
        if len(ww) == 0:
            pdb.set_trace()
        keep.append(ww)
    keep = np.hstack(keep)
    
    #keep = np.where( (gal == 'ESO350-38') or
    #                 (gal == )
    #                 )[0]
    print('Keeping {} RC3 galaxies.'.format(len(keep)))
    #_imagetool_inspect(rc3[keep])

    rc3 = rc3[keep]

    # Make the supplemental catalog "look" like the parent Hyperleda catalog.
    rc3['GALAXY'] = keepgals
    rc3['BYHAND'] = np.zeros(len(rc3), bool)
    rc3['BA'] = rc3['D25_MIN'] / rc3['D25_MAJ']
    rc3.rename_column('D25_MAJ', 'D25')
    rc3.rename_column('BMAG', 'MAG')

    pgc = [np.int(pgc.replace('PGC', '').replace('a+b', '')) for pgc in rc3['PGC']]
    rc3.rename_column('PGC', 'BIGPGC')
    rc3['PGC'] = pgc

    fix = np.where(rc3['GALAXY'] == 'ESO350-38')[0]
    if len(fix) > 0:
        rc3['RA'][fix], rc3['DEC'][fix] = 9.219583, -33.554722 # from NED
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'NGC526')[0]
    if len(fix) > 0:
        rc3['RA'][fix], rc3['DEC'][fix] = 20.993986, -35.122574 # from NED
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'MCG-1-3-72')[0]
    if len(fix) > 0:
        rc3['PA'][fix] = 45 # by eye
        rc3['MAG'][fix] = 17.55
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'UGCA20')[0]
    if len(fix) > 0:
        rc3['MAG'][fix] = 16.05
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'UGC4258')[0]
    if len(fix) > 0:
        rc3['MAG'][fix] = 16.14
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'MCG-1-25-6')[0]
    if len(fix) > 0:
        rc3['MAG'][fix] = 13.99
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'UGC5162')[0]
    if len(fix) > 0:
        rc3['MAG'][fix] = 15.94
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'ESO201-10')[0]
    if len(fix) > 0:
        rc3['MAG'][fix] = 16.0 # totally made up!
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'UGC4528')[0]
    if len(fix) > 0:
        rc3['MAG'][fix] = 16.14
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'UGC5482')[0]
    if len(fix) > 0:
        rc3['MAG'][fix] = 16.97
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'NGC6050')[0]
    if len(fix) > 0:
        rc3['MAG'][fix] = 15.4
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'ESO116-15')[0]
    if len(fix) > 0:
        rc3['PA'][fix] = 95 # by eye
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'MCG1-32-96')[0]
    if len(fix) > 0:
        rc3['PA'][fix] = 45 # by eye
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'ESO118-30')[0]
    if len(fix) > 0:
        rc3['D25'][fix] = 0.1*10**1.25
        rc3['BA'][fix] = 10**(-0.26)
        rc3['PA'][fix] = 64.3
        rc3['MAG'][fix] = 14.3
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'ESO248-6')[0]
    if len(fix) > 0:
        rc3['D25'][fix] = 0.1*10**1.21
        rc3['BA'][fix] = 10**(-0.41)
        rc3['PA'][fix] = 12.5
        rc3['MAG'][fix] = 15.05
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'ESO356-14')[0]
    if len(fix) > 0:
        rc3['D25'][fix] = 0.1*10**0.94
        rc3['BA'][fix] = 10**(-0.12)
        rc3['PA'][fix] = 127.7
        rc3['MAG'][fix] = 14.77
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'NGC7592')[0]
    if len(fix) > 0:
        rc3['D25'][fix] = 0.1*10**1.18
        rc3['BA'][fix] = 10**(-0.12)
        rc3['PA'][fix] = 85.0
        rc3['MAG'][fix] = 14.5
        rc3['BYHAND'][fix] = True

    fix = np.where(rc3['GALAXY'] == 'NGC7720')[0]
    if len(fix) > 0:
        rc3['PA'][fix] = 25
        rc3['D25'][fix] = 1.9 # eyeballed
        rc3['MAG'][fix] = 13.43
        rc3['BYHAND'][fix] = True

    #fix = rc3['MAG'] < 0
    #rc3['MAG'][fix] = 15.0 # hack!

    #fix = np.where(rc3['GALAXY'] == 'MCG-1-33-83')[0]
    #rc3['D25'][fix] = 
    
    out = Table()
    for col in parent.colnames:
        out[col] = np.zeros(len(rc3), dtype=parent[col].dtype)
    for col in rc3.colnames:
        if col in out.colnames:
            out[col] = rc3[col]
            
    #out['OBJTYPE'] = 'G'
    out['REF'] = 'RC3'
    out['Z'] = -99.0

    parent = vstack((parent, out))
    
    return parent
        
def in_footprint(parent, nside=2048):
    """Find all galaxies in the DESI footprint.

    """
    import healpy as hp
    import LSLGA.misc
    
    #tiles = LSLGA.io.read_desi_tiles(verbose=verbose)
    #indesi = LSLGA.misc.is_point_in_desi(tiles, parent['RA'], parent['DEC']).astype(bool)

    parentpix = LSLGA.misc.radec2pix(nside, parent['RA'], parent['DEC'])
    #parentpix = np.hstack((parentpix, hp.pixelfunc.get_all_neighbours(nside, parentpix, nest=True).flatten()))

    dr = 'dr9'
    drdir = os.path.join(sampledir, dr)

    bands = ('g', 'r', 'z')
    camera = ('90prime', 'mosaic', 'decam')

    indesi = dict()
    for cam in camera:
        for band in bands:
            indesi.update({'{}_{}'.format(cam, band): np.zeros(len(parent), dtype=bool)})

    #indesi = np.zeros(len(parent), dtype=bool)
    t0 = time.time()
    for cam, radius in zip(camera, (0.44, 0.21, 0.17)):
        if False:
            from astrometry.libkd.spherematch import trees_match, tree_open
            kdccds = tree_open(os.path.join(drdir, 'survey-ccds-{}-{}.kd.fits'.format(cam, dr)))
            I, J, dd = trees_match(kdparent, kdccds, np.radians(radius))#, nearest=True)
        else:
            ccdsfile = os.path.join(drdir, 'survey-ccds-{}-{}.kd.fits'.format(cam, dr))
            ccds = fitsio.read(ccdsfile)
            print('Read {} CCDs from {}'.format(len(ccds), ccdsfile))

            for band in bands:
                ww = ccds['filter'] == band
                if np.sum(ww) > 0:
                    # add the neighboring healpixels to protect against edge effects
                    ccdpix = LSLGA.misc.radec2pix(nside, ccds['ra'][ww], ccds['dec'][ww])
                    ccdpix = np.hstack((ccdpix, hp.pixelfunc.get_all_neighbours(nside, ccdpix, nest=True).flatten()))
                    if np.sum(ccdpix == -1) > 0: # remove the "no neighbors" healpixel, if it exists
                        ccdpix = np.delete(ccdpix, np.where(ccdpix == -1)[0])
                    I = np.isin(parentpix, ccdpix)
                    indesi['{}_{}'.format(cam, band)][I] = True
                else:
                    I = [False]
                #print('Found {} galaxies in {} {} footprint in {:.1f} sec'.format(np.sum(I), cam, time.time() - t0))
                print('  Found {} galaxies in {} {} footprint.'.format(np.sum(I), cam, band))
    print('Total time to find galaxies in footprint = {:.1f} sec'.format(time.time() - t0))
    
    parent['IN_DESI_NORTH'] = indesi['90prime_g'] | indesi['90prime_r'] | indesi['mosaic_z']
    parent['IN_DESI_NORTH_GRZ'] = indesi['90prime_g'] & indesi['90prime_r'] & indesi['mosaic_z']

    parent['IN_DESI_SOUTH'] = indesi['decam_g'] | indesi['decam_r'] | indesi['decam_z']
    parent['IN_DESI_SOUTH_GRZ'] = indesi['decam_g'] & indesi['decam_r'] & indesi['decam_z']
    
    parent['IN_DESI'] = parent['IN_DESI_NORTH'] | parent['IN_DESI_SOUTH']
    parent['IN_DESI_GRZ'] = parent['IN_DESI_NORTH_GRZ'] | parent['IN_DESI_SOUTH_GRZ']

    #plt.scatter(parent['RA'], parent['DEC'], s=1)
    #plt.scatter(parent['RA'][indesi], parent['DEC'][indesi], s=1)
    #plt.xlim(360, 0)
    #plt.show()

    #bb = parent[parent['IN_DESI_NORTH_GRZ'] & parent['IN_DESI_SOUTH_GRZ']]
    #plt.scatter(bb['RA'], bb['DEC'], s=1)
    #plt.xlim(300, 90) ; plt.ylim(30, 36)
    #plt.axhline(y=32.375, color='k')
    #plt.xlabel('RA') ; plt.ylabel('Dec')
    #plt.show()
    
    print('  Identified {}/{} ({:.2f}%) galaxies inside and {}/{} ({:.2f}%) galaxies outside the DESI footprint.'.format(
        np.sum(parent['IN_DESI']), len(parent), 100*np.sum(parent['IN_DESI'])/len(parent), np.sum(~parent['IN_DESI']),
        len(parent), 100*np.sum(~parent['IN_DESI'])/len(parent)))

    return parent

def near_stars(parent):
    """Flag galaxies near bright stars.

    """
    tycho = LSLGA.io.read_tycho(verbose=True)
    kdparent = tree_build_radec(parent['RA'], parent['DEC'])

    nearstar = np.zeros( len(parent) ).astype(bool)
    for star in tycho:
        I = tree_search_radec(kdparent, star['RA'], star['DEC'], star['RADIUS'])
        if len(I) > 0:
            nearstar[I] = True
    print('  Found {}/{} ({:.2f}%) galaxies near a bright (Tycho-2) star.'.format(
        np.sum(nearstar), len(parent), 100*np.sum(nearstar)/len(parent)))
    parent['NEAR_BRIGHTSTAR'] = nearstar

    return parent, kdparent
    
def apply_diamcut(parent, d25min, d25max):
    """Apply the diameter cuts.

    Note that a D(25) maximum cut of 100 arcmin throws out LMC=ESO056-115,
    SMC=NGC0292, M31=NGC224, and the Sagittarius Dwarf.

                GALAXY                    RA                 DEC            D25
                str29                  float64             float64        float32
    ----------------------------- ------------------ ------------------- ----------
    ESO056-115                            80.8941495  -69.75610400000001   645.6542
    SAGITTARIUS_DWARF_SPHEROIDAL          283.762899         -30.4784401  449.77997
    NGC0292                               13.1583105  -72.80022659999999  299.91626
    NGC0224                               10.6846845          41.2689778  177.82794

    """
    diamcut = (parent['D25'] >= d25min) * (parent['D25'] <= d25max)
    print('  Removed {}/{} ({:.2f}%) objects with D(25) < {:.3f} arcsec and D(25) > {:.3f} arcmin.'.format(
        np.sum(~diamcut), len(parent), 100*np.sum(~diamcut)/len(parent), d25min*60, d25max))
    if np.sum(diamcut) > 0:
        #parent[~diamcut].write(os.path.join(qadir, 'LSLGA-{}-diamcut.fits'.format(version)), overwrite=True)
        parent = parent[diamcut]

    return parent

def fix_byhand(parent):
    """Repair incorrect diameters and other properties in Hyperleda "by hand".

    See also WXSC - https://vislab.idia.ac.za/research
    
    """
    print('Repairing some quantities by-hand.')

    # Fix b/a>1 which are all wacky (but have been inspected, so they're real).
    fix = np.where(parent['BA'] > 1)[0]
    if len(fix) > 0:
        parent['BA'][fix] = 1.0
        parent['PA'][fix] = 0.0
        parent['BYHAND'][fix] = True

    # IC5324
    # Coordinates are totally wrong!
    fix = np.where(parent['PGC'] == 71526)[0]
    if len(fix) > 0:
        parent['RA'][fix] = 352.07395833333334,
        parent['DEC'][fix] = -67.82136111111112
        parent['BYHAND'][fix] = True
          
    # UGC504
    # Use RC3 values
    fix = np.where(parent['PGC'] == 2882)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 1.175
        parent['BYHAND'][fix] = True
          
    # Maffei2
    # Use https://github.com/moustakas/LSLGA/blob/master/doc/compare-wxsc-largest-galaxies.ipynb
    fix = np.where(parent['PGC'] == 10217)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 2 * 8.50
        parent['PA'][fix] = 27.7
        parent['BA'][fix] = 0.44
        parent['BYHAND'][fix] = True
        
    # UGC05302
    # https://ned.ipac.caltech.edu/byname?objname=UGC05302&hconst=67.8&omegam=0.308&omegav=0.692&wmap=4&corr_z=1
    fix = np.where(parent['PGC'] == 28563)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.29
        parent['PA'][fix] = 117
        parent['BA'][fix] = 10**(-0.06)
        parent['BYHAND'][fix] = True
        
    # PGC061191 - fix by eye
    fix = np.where(parent['PGC'] == 61191)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.8
        parent['BA'][fix] = 1.0
        parent['BYHAND'][fix] = True
          
    # PGC008356 - use RC3 diameters but PA from SDSS
    # https://ned.ipac.caltech.edu/byname?objname=PGC008356&hconst=67.8&omegam=0.308&omegav=0.692&wmap=4&corr_z=1
    fix = np.where(parent['PGC'] == 8356)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**0.74
        parent['PA'][fix] = 105
        parent['BA'][fix] = 10**(-0.38)
        parent['BYHAND'][fix] = True
        
    # [PT2011]53, wrong PA
    fix = np.where(parent['GALAXY'] == '[PT2011]53')[0]
    if len(fix) > 0:
        parent['PA'][fix] = 45.0
        parent['BYHAND'][fix] = True
    
    # PGC1035237, Leda coordiantes are totally wrong!
    fix = np.where(parent['PGC'] == 1035237)[0]
    if len(fix) > 0:
        parent['RA'][fix] = 31.8505
        parent['DEC'][fix] = -6.2346
        parent['BYHAND'][fix] = True

    # PGC040184=VCC0619, use geometry from NED
    # https://ned.ipac.caltech.edu/byname?objname=PGC40184&hconst=67.8&omegam=0.308&omegav=0.692&wmap=4&corr_z=1
    fix = np.where(parent['PGC'] == 40184)[0]
    if len(fix) > 0:
        parent['RA'][fix] = 185.770708
        parent['DEC'][fix] = 15.931667
        parent['PA'][fix] = 70.0 # eye-balled
        parent['BYHAND'][fix] = True
        
    # NGC5474, use D25, PA, and BA from NED
    # https://ned.ipac.caltech.edu/byname?objname=ngc5474&hconst=67.8&omegam=0.308&omegav=0.692&wmap=4&corr_z=1
    fix = np.where(parent['PGC'] == 50216)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.68
        parent['PA'][fix] = 97.5
        parent['BA'][fix] = 10**(-0.05)
        parent['BYHAND'][fix] = True

    # PGC170137, fix the PA--not sure why it's not populated
    # http://leda.univ-lyon1.fr/fG.cgi?n=a103&o=PGC170137
    fix = np.where(parent['PGC'] == 170137)[0]
    if len(fix) > 0:
        parent['PA'][fix] = 42.0
        parent['BYHAND'][fix] = True

    # NGC4526, use PA from NED
    # https://ned.ipac.caltech.edu/byname?objname=ngc779&hconst=67.8&omegam=0.308&omegav=0.692&wmap=4&corr_z=1
    fix = np.where(parent['PGC'] == 41772)[0]
    if len(fix) > 0:
        parent['PA'][fix] = 113.0
        parent['BYHAND'][fix] = True

    # PGC007900, use D25 from NED and visually determined PA
    # https://ned.ipac.caltech.edu/byname?objname=PGC007900&hconst=67.8&omegam=0.308&omegav=0.692&wmap=4&corr_z=1
    fix = np.where(parent['PGC'] == 7900)[0]
    if len(fix) > 0:
        parent['PA'][fix] = 65.0
        parent['D25'][fix] = 0.1 * 10**1.51 # [arcmin]
        parent['BYHAND'][fix] = True
        
    # NGC5364, use PA and D25 from RC3/NED
    # https://ned.ipac.caltech.edu/byname?objname=ngc5364&hconst=67.8&omegam=0.308&omegav=0.692&wmap=4&corr_z=1
    fix = np.where(parent['PGC'] == 49555)[0]
    if len(fix) > 0:
        parent['PA'][fix] = 30.0
        parent['BA'][fix] = 0.65
        parent['D25'][fix] = 0.1 * 10**1.83 # [arcmin]
        parent['BYHAND'][fix] = True

    # NGC0779, use value from RC3
    # https://ned.ipac.caltech.edu/byname?objname=ngc779&hconst=67.8&omegam=0.308&omegav=0.692&wmap=4&corr_z=1
    fix = np.where(parent['PGC'] == 7544)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1 * 10**1.6 # [arcmin]
        parent['BYHAND'][fix] = True

    # NGC4448, use values from RC3
    # https://ned.ipac.caltech.edu/byname?objname=ngc4448&hconst=67.8&omegam=0.308&omegav=0.692&wmap=4&corr_z=1
    fix = np.where(parent['PGC'] == 40988)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1 * 10**1.59 # [arcmin]
        parent['BA'][fix] = 10**(-0.44)
        parent['PA'][fix] = 94.0
        parent['BYHAND'][fix] = True

    # NGC4395 https://github.com/moustakas/LSLGA/issues/28
    fix = np.where(parent['PGC'] == 40596)[0] 
    if len(fix) > 0:
        parent['D25'][fix] = 12.8 # [arcmin]
        parent['BA'][fix] = 0.833
        parent['BYHAND'][fix] = True

    # NGC2366 https://github.com/moustakas/LSLGA/issues/29
    fix = np.where(parent['PGC'] == 21102)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 8.8964 # [arcmin]
        parent['BA'][fix] = 0.5263
        parent['BYHAND'][fix] = True

    # IC4212
    fix = np.where(parent['PGC'] == 45845)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.49
        parent['BA'][fix] = 10**(-0.11)
        parent['PA'][fix] = 140
        parent['BYHAND'][fix] = True

    # PGC28111
    fix = np.where(parent['PGC'] == 28111)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**0.62
        parent['BA'][fix] = 10**(-0.11)
        parent['BYHAND'][fix] = True

    # PGC075458=ESO488-31
    fix = np.where(parent['PGC'] == 75458)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.977
        parent['BYHAND'][fix] = True

    # PGC16395=ESO119-23
    fix = np.where(parent['PGC'] == 16395)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 1.445
        parent['BYHAND'][fix] = True

    # PGC011986 - coordinates are totally wrong!
    fix = np.where(parent['PGC'] == 11986)[0]
    if len(fix) > 0:
        parent['RA'][fix] = 48.285686
        parent['DEC'][fix] = -50.562612
        parent['BYHAND'][fix] = True

    ## PGC011986 - wrong PA
    #fix = np.where(parent['PGC'] == 11986)[0]
    #if len(fix) > 0:
    #    parent['PA'][fix] = 

    # NGC7424; use NED
    fix = np.where(parent['PGC'] == 70096)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.98
        parent['BA'][fix] = 10**(-0.07)
        parent['PA'][fix] = 85 # approximate
        parent['BYHAND'][fix] = True

    # NGC1566 - use NED
    fix = np.where(parent['PGC'] == 14897)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.92
        parent['BA'][fix] = 10**(-0.1)
        parent['PA'][fix] = 60.
        parent['BYHAND'][fix] = True
          
    # NGC4552 - use NED
    fix = np.where(parent['PGC'] == 41968)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.72
        parent['BA'][fix] = 0.984
        parent['PA'][fix] = 0
        parent['BYHAND'][fix] = True
          
    # NGC1433 - use NED
    fix = np.where(parent['PGC'] == 13586)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.81
        parent['BA'][fix] = 10**(-0.04)
        parent['PA'][fix] = 87.9
        parent['BYHAND'][fix] = True
          
    # NGC1808 - use NED
    fix = np.where(parent['PGC'] == 16779)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.81
        parent['BA'][fix] = 10**(-0.22)
        parent['PA'][fix] = 133.0
        parent['BYHAND'][fix] = True
          
    # NGC4244 - use NED
    fix = np.where(parent['PGC'] == 39422)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**2.22
        parent['BA'][fix] = 10**(-0.94)
        parent['PA'][fix] = 48
        parent['BYHAND'][fix] = True
          
    # NGC7606 - use NED
    fix = np.where(parent['PGC'] == 71047)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.73
        parent['BA'][fix] = 10**(-0.4)
        parent['PA'][fix] = 145
        parent['BYHAND'][fix] = True
          
    # NGC3718 - use NED
    fix = np.where(parent['PGC'] == 35616)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.91
        parent['BA'][fix] = 10**(-0.31)
        parent['PA'][fix] = 15
        parent['BYHAND'][fix] = True
          
    # NGC5629 - use NED
    fix = np.where(parent['PGC'] == 51681)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.26
        parent['BYHAND'][fix] = True
          
    # NGC4597 - use NED
    fix = np.where(parent['PGC'] == 42429)[0]
    if len(fix) > 0:
        parent['PA'][fix] = 49.0
        parent['BYHAND'][fix] = True
        
    # PGC143679 - totally wrong diameter!
    fix = np.where(parent['PGC'] == 143679)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**0.386
        parent['BYHAND'][fix] = True
        
    # NGC2275 - use NED
    fix = np.where(parent['PGC'] == 19605)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.1
        parent['BA'][fix] = 10**(-0.12)
        parent['PA'][fix] = 20
        parent['BYHAND'][fix] = True

    # IC0983 - use NED
    fix = np.where(parent['PGC'] == 50577)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.73
        parent['BA'][fix] = 10**(-0.06)
        parent['PA'][fix] = 120
        parent['BYHAND'][fix] = True

    # NGC5921 - use NED
    fix = np.where(parent['PGC'] == 54849)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.69
        parent['BA'][fix] = 10**(-0.09)
        parent['PA'][fix] = 130
        parent['BYHAND'][fix] = True

    # NGC5987 - use NED
    fix = np.where(parent['PGC'] == 55740)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.62
        parent['BA'][fix] = 10**(-0.5)
        parent['PA'][fix] = 165
        parent['BYHAND'][fix] = True

    # NGC1543 - use NED
    fix = np.where(parent['PGC'] == 14659)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.69
        parent['BA'][fix] = 10**(-0.24)
        parent['PA'][fix] = 93
        parent['BYHAND'][fix] = True

    # NGC5774 - use NED
    fix = np.where(parent['PGC'] == 53231)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.48
        parent['BA'][fix] = 10**(-0.09)
        parent['PA'][fix] = 145
        parent['BYHAND'][fix] = True

    # NGC1042 - use NED
    fix = np.where(parent['PGC'] == 10122)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.5
        parent['BA'][fix] = 1.0
        parent['PA'][fix] = 0.0
        parent['BYHAND'][fix] = True

    # UGC01176 - use NED
    fix = np.where(parent['PGC'] == 6174)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.27
        parent['BA'][fix] = 10**(-0.1)
        parent['BYHAND'][fix] = True

    # NGC3556 - use NED
    fix = np.where(parent['PGC'] == 34030)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.94
        parent['BA'][fix] = 10**(-0.59)
        parent['PA'][fix] = 80
        parent['BYHAND'][fix] = True

    # NGC0660 - use NED
    fix = np.where(parent['PGC'] == 6318)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.92
        parent['BA'][fix] = 10**(-0.42)
        parent['PA'][fix] = 170
        parent['BYHAND'][fix] = True

    # NGC2805 - use NED
    fix = np.where(parent['PGC'] == 26410)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.80
        parent['BA'][fix] = 10**(-0.12)
        parent['PA'][fix] = 125
        parent['BYHAND'][fix] = True

    # NGC5792 - use NED
    fix = np.where(parent['PGC'] == 53499)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.84
        parent['BA'][fix] = 10**(-0.6)
        parent['PA'][fix] = 84
        parent['BYHAND'][fix] = True

    # NGC1189 - use NED
    fix = np.where(parent['PGC'] == 11503)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.23
        parent['BA'][fix] = 10**(-0.04)
        parent['PA'][fix] = 0
        parent['BYHAND'][fix] = True

    # NGC4274 - use NED
    fix = np.where(parent['PGC'] == 39724)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.83
        parent['BA'][fix] = 10**(-0.43)
        parent['PA'][fix] = 102
        parent['BYHAND'][fix] = True

    # NGC3893 - use NED
    fix = np.where(parent['PGC'] == 36875)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.65
        parent['BA'][fix] = 10**(-0.21)
        parent['PA'][fix] = 165
        parent['BYHAND'][fix] = True

    # NGC4203 - use NED
    fix = np.where(parent['PGC'] == 39158)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.65
        parent['BA'][fix] = 10**(-0.03)
        parent['BYHAND'][fix] = True

    # UGC06917 - use NED
    fix = np.where(parent['PGC'] == 37525)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.55
        parent['BA'][fix] = 10**(-0.24)
        parent['PA'][fix] = 130
        parent['BYHAND'][fix] = True

    # UGC08331 - use NED
    fix = np.where(parent['PGC'] == 46127)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.43
        parent['BA'][fix] = 10**(-0.46)
        parent['PA'][fix] = 140
        parent['BYHAND'][fix] = True

    # NGC7753 - use NED
    fix = np.where(parent['PGC'] == 72387)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.52
        parent['BA'][fix] = 10**(-0.2)
        parent['PA'][fix] = 50
        parent['BYHAND'][fix] = True

    # ESO185-054 - use NED
    fix = np.where(parent['PGC'] == 64041)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.55
        parent['BA'][fix] = 10**(-0.17)
        parent['PA'][fix] = 122
        parent['BYHAND'][fix] = True

    # train wreck, Hyperleda is totally wrong here! - NGC6027, NGC6027A,
    # NGC6027B, NGC6027C, NGC6027D, NGC6027E
    fix = np.where(parent['GALAXY'] == 'NGC6027')[0]
    if len(fix) > 0:
        parent['RA'][fix] = 239.80224
        parent['DEC'][fix] = 20.76336
        parent['D25'][fix] = 0.1*10**0.64
        parent['BA'][fix] = 10**(-0.28)
        parent['PA'][fix] = 90 # eyeball
        parent['BYHAND'][fix] = True
    
    fix = np.where(parent['GALAXY'] == 'NGC6027A')[0]
    if len(fix) > 0:
        parent['RA'][fix] = 239.7964
        parent['DEC'][fix] = 20.75485
        parent['D25'][fix] = 0.1*10**0.83
        parent['BA'][fix] = 10**(-0.16)
        parent['PA'][fix] = 0.0
        parent['BYHAND'][fix] = True
    
    fix = np.where(parent['GALAXY'] == 'NGC6027B')[0]
    if len(fix) > 0:
        parent['RA'][fix] = 239.79514
        parent['DEC'][fix] = 20.76219
        parent['D25'][fix] = 0.1*10**0.60
        parent['BA'][fix] = 10**(-0.16)
        parent['PA'][fix] = 0.0
        parent['BYHAND'][fix] = True
    
    fix = np.where(parent['GALAXY'] == 'NGC6027C')[0]
    if len(fix) > 0:
        parent['RA'][fix] = 239.79945
        parent['DEC'][fix] = 20.74762
        parent['D25'][fix] = 0.1*10**0.94
        parent['BA'][fix] = 10**(-0.68)
        parent['PA'][fix] = 174.2
        parent['BYHAND'][fix] = True
    
    fix = np.where(parent['GALAXY'] == 'NGC6027D')[0]
    if len(fix) > 0:
        parent['RA'][fix] = 239.80373
        parent['DEC'][fix] = 20.75993
        parent['D25'][fix] = 0.1*10**0.22
        parent['BA'][fix] = 1.0
        parent['PA'][fix] = 0.0
        parent['BYHAND'][fix] = True
    
    fix = np.where(parent['GALAXY'] == 'NGC6027E')[0]
    if len(fix) > 0:
        parent['RA'][fix] = 239.81033
        parent['DEC'][fix] = 20.76592
        parent['D25'][fix] = 0.1*10**0.9
        parent['BA'][fix] = 10**(-0.27)
        parent['PA'][fix] = 30 # eyeball
        parent['BYHAND'][fix] = True

    # NGC4912=NGC4914 - use NED
    fix = np.where(parent['PGC'] == 44807)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.54
        parent['BA'][fix] = 10**(-0.25)
        parent['PA'][fix] = 155
        parent['BYHAND'][fix] = True

    # NGC6902 - use NED
    fix = np.where(parent['PGC'] == 64632)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.75
        parent['BA'][fix] = 10**(-0.16)
        parent['PA'][fix] = 153
        parent['BYHAND'][fix] = True

    # PGC068303 - use NED
    fix = np.where(parent['PGC'] == 68303)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 2 * 26.7 / 60
        parent['BA'][fix] = 0.84
        parent['PA'][fix] = 0
        parent['BYHAND'][fix] = True

    # NGC3614 - use NED
    fix = np.where(parent['PGC'] == 34561)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.66
        parent['BA'][fix] = 10**(-0.24)
        parent['PA'][fix] = 80
        parent['BYHAND'][fix] = True

    # PGC005341 - use NED
    fix = np.where(parent['PGC'] == 5341)[0]
    if len(fix) > 0:
        parent['PA'][fix] = 25
        parent['BYHAND'][fix] = True

    # NGC4267 - use NED
    fix = np.where(parent['PGC'] == 39710)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.51
        parent['BA'][fix] = 10**(-0.03)
        parent['PA'][fix] = 40
        parent['BYHAND'][fix] = True

    # PGC029842 - use NED
    fix = np.where(parent['PGC'] == 29842)[0]
    if len(fix) > 0:
        parent['PA'][fix] = 81
        parent['BYHAND'][fix] = True

    # PGC059251 - use NED
    fix = np.where(parent['PGC'] == 59251)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 2 * 28.6 / 60
        parent['BA'][fix] = 13.77 / 28.6
        parent['PA'][fix] = 130.8
        parent['BYHAND'][fix] = True

    # NGC1721 - use NED
    fix = np.where(parent['PGC'] == 16484)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.32
        parent['BA'][fix] = 10**(-0.31)
        parent['BYHAND'][fix] = True

    # NGC4780 - use NED
    fix = np.where(parent['PGC'] == 43870)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.29
        parent['BA'][fix] = 10**(-0.180)
        parent['PA'][fix] = 15 # eyeballed?
        parent['BYHAND'][fix] = True

    # NGC4319 - use NED
    fix = np.where(parent['PGC'] == 39981)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.47
        parent['BA'][fix] = 10**(-0.11)
        parent['PA'][fix] = 160
        parent['BYHAND'][fix] = True
          
    # NGC4705 - use NED
    fix = np.where(parent['PGC'] == 43350)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.48
        parent['BA'][fix] = 10**(-0.46)
        parent['PA'][fix] = 125
        parent['BYHAND'][fix] = True
          
    # NGC4759 - wrong diameter; use Corwin et al. (dataset 17001)
    fix = np.where(parent['PGC'] == 43754)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**0.54
        parent['BA'][fix] = 10**(-0.3)
        parent['PA'][fix] = 5
        parent['BYHAND'][fix] = True

    # NGC0259 - use NED
    fix = np.where(parent['PGC'] == 2820)[0]
    if len(fix) > 0:
        parent['PA'][fix] = 140
        parent['BYHAND'][fix] = True

    ## ESO205-027 - need to do something but not sure what!
    #fix = np.where(parent['PGC'] == 18514)[0]
    #if len(fix) > 0:
    #    parent['D25'][fix] = 0.1*10**
    #    parent['BA'][fix] = 10**()
    #    parent['PA'][fix] = 

    # NGC7145 - use NED
    fix = np.where(parent['PGC'] == 67583)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.4
        parent['BA'][fix] = 10**(-0.02)
        parent['BYHAND'][fix] = True

    # SDSSJ161534.10+192734.8 - wrong diameter
    fix = np.where(parent['PGC'] == 4530633)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**0.57
        parent['BYHAND'][fix] = True

    # NGC4257 - use NED
    fix = np.where(parent['PGC'] == 39624)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.10
        parent['BA'][fix] = 10**(-0.55)
        parent['BYHAND'][fix] = True

    # 2MASXJ14532797+0532180 - fix PA
    fix = np.where(parent['PGC'] == 3835908)[0]
    if len(fix) > 0:
        parent['PA'][fix] = 85
        parent['BYHAND'][fix] = True

    # NGC5557 - use NED
    fix = np.where(parent['PGC'] == 51104)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 2.28 * 1.5 # eyeball
        parent['BA'][fix] = 10**(-0.09)
        parent['PA'][fix] = 105
        parent['BYHAND'][fix] = True
          
    # PGC065158 - fix PA
    fix = np.where(parent['PGC'] == 65158)[0]
    if len(fix) > 0:
        parent['PA'][fix] = 67
        parent['BYHAND'][fix] = True

    # ESO108-023 - use NED
    fix = np.where(parent['PGC'] == 68473)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.41
        parent['BA'][fix] = 10**(-0.05)
        parent['BYHAND'][fix] = True
          
    # NGC4517A - use NED
    fix = np.where(parent['PGC'] == 41578)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.60
        parent['BA'][fix] = 10**(-0.18)
        parent['PA'][fix] = 30
        parent['BYHAND'][fix] = True
          
    # NGC4330 - use NED
    fix = np.where(parent['PGC'] == 40201)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.65
        parent['BA'][fix] = 10**(-0.7)
        parent['PA'][fix] = 59
        parent['BYHAND'][fix] = True
          
    # PGC131942 - fix diameter
    fix = np.where(parent['PGC'] == 131942)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**0.54
        parent['BYHAND'][fix] = True

    # NGC5523 - use NED
    fix = np.where(parent['PGC'] == 50895)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.66
        parent['BA'][fix] = 10**(-0.56)
        parent['PA'][fix] = 99
        parent['BYHAND'][fix] = True

    # PGC041965 - use Corwin+
    fix = np.where(parent['PGC'] == 41965)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.76
        parent['BA'][fix] = 0.708
        parent['PA'][fix] = 55
        parent['BYHAND'][fix] = True

    # NGC2776 - use NED
    fix = np.where(parent['PGC'] == 25946)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.48
        parent['BA'][fix] = 10**(-0.05)
        parent['PA'][fix] = 111
        parent['BYHAND'][fix] = True

    # NGC4643 - use NED
    fix = np.where(parent['PGC'] == 42797)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.49
        parent['BA'][fix] = 10**(-0.13)
        parent['PA'][fix] = 48
        parent['BYHAND'][fix] = True

    # NGC5701 - use NED
    fix = np.where(parent['PGC'] == 52365)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.63
        parent['BA'][fix] = 10**(-0.02)
        parent['PA'][fix] = 3.5
        parent['BYHAND'][fix] = True

    # NGC5324 - fix b/a
    fix = np.where(parent['PGC'] == 49236)[0]
    if len(fix) > 0:
        parent['BA'][fix] = 10**(-0.03)
        parent['BYHAND'][fix] = True

    # ESO485-021 - use NED
    fix = np.where(parent['PGC'] == 16236)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.59
        parent['BA'][fix] = 10**(-0.08)
        parent['PA'][fix] = 110
        parent['BYHAND'][fix] = True

    # PGC1722712 - fix coords by eye
    fix = np.where(parent['PGC'] == 1722712)[0]
    if len(fix) > 0:
        parent['RA'][fix] = 326.1247
        parent['DEC'][fix] = 25.0086
        parent['BYHAND'][fix] = True

    # PGC200231 is really part of PGC020460 in Hyperleda, but I'm going to move
    # it "by hand" to make it the companion UGC03730, which is missing from the
    # parent catalog.
    fix = np.where(parent['PGC'] == 1722712)[0]
    if len(fix) > 0:
        parent['GALAXY'][fix] = 'UGC03730'
        parent['RA'][fix] = 108.5847 # by eye
        parent['DEC'][fix] = 73.4615
        parent['D25'][fix] = 1.8
        parent['BA'][fix] = 1.0
        parent['PA'][fix] = 0.0
        parent['BYHAND'][fix] = True

    # 2MASXJ11503438+0645560 - use NED
    fix = np.where(parent['PGC'] == 3777902)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 2 * 19.5 / 60
        parent['BA'][fix] = 0.44
        parent['PA'][fix] = 35
        parent['BYHAND'][fix] = True

    # NGC5248 - use NED
    fix = np.where(parent['PGC'] == 48130)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.79
        parent['BA'][fix] = 10**(-0.14)
        parent['PA'][fix] = 110
        parent['BYHAND'][fix] = True

    # PGC014121
    fix = np.where(parent['PGC'] == 14121)[0]
    if len(fix) > 0:
        parent['D25'][fix] *= 1.2 # eyeballed
        parent['PA'][fix] = 45
        parent['BYHAND'][fix] = True

    # NGC3310 - use NED
    fix = np.where(parent['PGC'] == 31650)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.49
        parent['BA'][fix] = 10**(-0.11)
        parent['PA'][fix] = 0.0
        parent['BYHAND'][fix] = True

    # SDSSJ102256.47+344656.4 - make a bit smaller
    fix = np.where(parent['GALAXY'] == 'SDSSJ102256.47+344656.4')[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.4
        parent['BYHAND'][fix] = True

    # PGC156103 - galaxy merger; move the central coordinates over and make the
    # galaxy smaller because we pick up the companion in the DR8-supplement
    # catalog
    fix = np.where(parent['PGC'] == 156103)[0]
    if len(fix) > 0:
        parent['RA'][fix] = 164.8449 # eyeballed
        parent['DEC'][fix] = -7.0008 # eyeballed
        parent['D25'][fix] = 0.3
        parent['BA'][fix] = 0.3
        parent['PA'][fix] = 30
        parent['BYHAND'][fix] = True

    # PGC085570 - make a bit smaller (merger with NGC7720)
    fix = np.where(parent['PGC'] == 85570)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.4
        parent['BYHAND'][fix] = True

    # NGC0331: - use a secondary name that NED recognizes
    fix = np.where(parent['PGC'] == 3406)[0]
    if len(fix) > 0:
        parent['GALAXY'][fix] = 'MCG-01-03-039'
        parent['BYHAND'][fix] = True

    # NGC4842: - use a secondary name that NED recognizes
    fix = np.where(parent['PGC'] == 44338)[0]
    if len(fix) > 0:
        parent['GALAXY'][fix] = '2MASSJ12573612+2729053'
        parent['BYHAND'][fix] = True

    # [MSB2017]J1305+41 - eyeballed coordinates
    fix = np.where(parent['PGC'] == 6657076)[0]
    if len(fix) > 0:
        parent['RA'][fix] = 196.3716  # eyeballed
        parent['DEC'][fix] =  41.8938 # eyeballed
        parent['BYHAND'][fix] = True

    # [EKS2015]RS0955 
    fix = np.where(parent['PGC'] == 6740714)[0]
    if len(fix) > 0:
        parent['BA'][fix] =  0.5 # eyeballed
        parent['PA'][fix] =  30 # eyeballed
        parent['BYHAND'][fix] = True

    # [CKT2009]D1028+70 - use Chiboucas+09
    fix = np.where(parent['PGC'] == 5056941)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 0.1*10**1.146
        parent['BA'][fix] = 10**(0.954-1.146)
        parent['BYHAND'][fix] = True

    return parent

def add_localgroup_dwarfs(parent):
    """LG dwarfs

    """
    from astropy.table import hstack
    
    print('Adding in the LG dwarfs.')
    dwarfs = LSLGA.io.read_localgroup_dwarfs()
    #dwarfs = dwarfs[(~dwarfs['IGNORE']) * (~dwarfs['RESOLVED'])] # remove these below

    m1, m2, d12 = match_radec(parent['RA'], parent['DEC'], dwarfs['RA'], dwarfs['DEC'], 60/3600.0, nearest=True)
    dwarfs['PGC'][m2] = parent['PGC'][m1]
   
    if False:
        print(hstack((parent['GALAXY', 'RA', 'DEC', 'D25'][m1], dwarfs['GALAXY', 'ONAME', 'RA', 'DEC', 'D25', 'RECNO'][m2])))
        from astropy.stats import sigma_clipped_stats
        print(sigma_clipped_stats(parent['D25'][m1]/dwarfs['D25'][m2], sigma=3))
        fig, ax = plt.subplots(1, 3, figsize=(12, 4))
        ax[0].scatter(parent['D25'][m1], dwarfs['D25'][m2])
        ax[1].scatter(parent['PA'][m1], dwarfs['PA'][m2]) ; ax[1].set_xlim(-5, 184) ; ax[1].set_ylim(-5, 184)
        ax[2].scatter(parent['BA'][m1], dwarfs['BA'][m2]) ; ax[2].set_xlim(0, 1) ; ax[2].set_ylim(0, 1)
        plt.show()

    # Make the dwarfs catalog "look" like the parent Hyperleda catalog and assign IDs.
    moredwarfs = Table()
    for col in parent.colnames:
        moredwarfs[col] = np.zeros(len(dwarfs), dtype=parent[col].dtype)
    for col in dwarfs.colnames:
        if col in moredwarfs.colnames:
            moredwarfs[col] = dwarfs[col]
    moredwarfs['REF'] = 'LGDWARFS'

    # Remove the duplicates and stack.
    keep = np.delete(np.arange(len(parent)), m1)
    parent = vstack((parent[keep], moredwarfs))
    #parent = parent[np.argsort(parent['ID'])]

    # Finally, remove the dwarfs that are so sparse that we don't care about
    # them and the dwarfs that are so resolved (Fornax & Sculptor) that we
    # actually want to treat them as globular cluster (i.e., "force PSF").
    rem = np.where(np.logical_or(dwarfs['IGNORE'], dwarfs['RESOLVED']))[0]
    m1, m2, d12 = match_radec(parent['RA'], parent['DEC'], dwarfs['RA'][rem],
                              dwarfs['DEC'][rem], 60/3600.0, nearest=True)
    keep = np.delete(np.arange(len(parent)), m1)
    parent = parent[keep]

    return parent

def add_dr8_candidates(parent, startindx=5000000):
    """Read the set of "large" galaxies identified by Stephanie Juneau from the DR8
    catalogs.

    """
    from legacyhalos.misc import is_in_ellipse

    import numpy.ma as ma
    from legacyhalos.brick import brickname as get_brickname
    
    print('Supplementing the LSGLA with the DR8 large galaxies.')

    suppfile = os.path.join(sampledir, 'catalogs', 'dr8galaxies.fits')
    _supp = Table(fitsio.read(suppfile, upper=True))
    print('Read {} galaxies from {}'.format(len(_supp), suppfile))
    bricknames = get_brickname(_supp['RA'], _supp['DEC'])
    _supp['GALAXY'] = ['DR8-{}-{}'.format(bricknames[igal], _supp['OBJID'][igal]) for igal in np.arange(len(_supp))]

    # Find and remove duplicates--
    m1, m2, d12 = match_radec(parent['RA'], parent['DEC'], _supp['RA'], _supp['DEC'], 3/3600.0, nearest=True)
    if len(m1) > 0:
        print('Removing {} duplicates.'.format(len(m1)))
        #imagetool_inspect(_supp[m2])
        keep = np.delete(np.arange(len(_supp)), m2)
        _supp = _supp[keep]

    #northfile = os.path.join(sampledir, 'catalogs', 'dr8galaxies_gt14_north.fits')
    #north = Table(fitsio.read(northfile, upper=True))
    #print('Read {} galaxies from {}'.format(len(north), northfile))
    #
    #southfile = os.path.join(sampledir, 'catalogs', 'dr8galaxies_gt14_south.fits')
    #south = Table(fitsio.read(southfile, upper=True))
    #print('Read {} galaxies from {}'.format(len(south), southfile))
    #
    #nkeep = np.where((north['DEC'] > 32.375))[0]
    #skeep = np.where((south['DEC'] < 32.375))[0]
    ##nkeep = np.where((north['DEC'] > 32.375) * (north['VI_FLAG'] == 'Y'))[0]
    ##skeep = np.where((south['DEC'] < 32.375) * (south['VI_FLAG'] == 'Y'))[0]

    #print('Add in a minimum d25 for the sdss-supplemented galaxies!!!!!!!!!')

    #if False:
    #    plt.scatter(north['RA'], north['DEC'], label='North')
    #    plt.scatter(south['RA'], south['DEC'], label='South')
    #    plt.scatter(north['RA'][nkeep], north['DEC'][nkeep], label='North Keep')
    #    plt.scatter(south['RA'][skeep], south['DEC'][skeep], label='South Keep') 
    #    plt.legend() ; plt.axhline(y=32.375, color='k') ; plt.show()

    # Resolve north & south
    #supp = vstack((north[nkeep], south[skeep]))

    gaiafile = os.path.join(sampledir, 'catalogs', 'dr8-gaia-psf-galaxies.fits')
    gaia = Table(fitsio.read(gaiafile, upper=True))
    print('Read {} galaxies from {}'.format(len(gaia), gaiafile))
    bricknames = get_brickname(gaia['RA'], gaia['DEC'])
    gaia['GALAXY'] = ['DR8-{}-{}'.format(bricknames[igal], gaia['OBJID'][igal]) for igal in np.arange(len(gaia))]

    # Find and remove duplicates--
    m1, m2, d12 = match_radec(parent['RA'], parent['DEC'], gaia['RA'], gaia['DEC'], 3/3600.0, nearest=True)
    if len(m1) > 0:
        print('Removing {} duplicates.'.format(len(m1)))
        #imagetool_inspect(gaia[m2])
        keep = np.delete(np.arange(len(gaia)), m2)
        gaia = gaia[keep]

    # Find and remove duplicates--
    m1, m2, d12 = match_radec(_supp['RA'], _supp['DEC'], gaia['RA'], gaia['DEC'], 1/3600.0, nearest=True)
    if len(m2) > 0:
        keep = np.delete(np.arange(len(gaia)), m2)
        gaia = gaia[keep]
    #for col in supp.colnames:
    #    if col in gaia.colnames:
    #        print(col)
    supp = vstack((_supp, gaia), join_type='outer')

    # Assign IDs starting at startindx.
    supp.add_column(Column(name='ID', data=startindx + np.arange(len(supp))), index=0)
    #supp.rename_column('TYPE', 'MORPHTYPE')

    # Make the supplemental catalog "look" like the parent Hyperleda catalog.
    out = Table()
    for col in parent.colnames:
        out[col] = np.zeros(len(supp), dtype=parent[col].dtype)
    for col in supp.colnames:
        if col in out.colnames:
            out[col] = supp[col]
    out['Z'] = -1.0
    #out['OBJTYPE'] = 'G'

    # Get the geometry from the Tractor fit--
    #print(set(supp['TYPE']))
    r50min = np.float32(5.0) # [arcsec]
    for igal, gal in enumerate(supp):

        # Some objects have no r-band flux...
        if np.isfinite(supp['MAG_R'][igal]) and supp['MAG_R'][igal] > 0:
            out['MAG'][igal] = supp['MAG_R'][igal]
        elif np.isfinite(supp['FLUX_R'][igal]) and supp['FLUX_R'][igal] > 0:
            out['MAG'][igal] = 22.5-2.5*np.log10(supp['FLUX_R'][igal])
        else:
            print('Making up an r-band magnitude for {}!'.format(out['GALAXY'][igal]))
            out['MAG'][igal] = 17.0
        
        typ = gal['TYPE'].strip()
        #typ = gal['MORPHTYPE'].strip()
        if typ == 'DEV':
            ee = np.hypot(gal['SHAPEDEV_E1'], gal['SHAPEDEV_E2'])
            r50 = gal['SHAPEDEV_R'] # [arcsec]
            pa = 180 - (-np.rad2deg(np.arctan2(gal['SHAPEDEV_E2'], gal['SHAPEDEV_E1']) / 2))
        elif typ == 'EXP':
            ee = np.hypot(gal['SHAPEEXP_E1'], gal['SHAPEEXP_E2'])
            r50 = gal['SHAPEEXP_R'] # [arcsec]
            pa = 180 - (-np.rad2deg(np.arctan2(gal['SHAPEEXP_E2'], gal['SHAPEEXP_E1']) / 2))
        elif typ == 'REX' or typ == 'PSF' or typ == 'DUP':
            ee = np.float32(0.0)
            pa = np.float32(0.0)
            if typ == 'PSF' or typ == 'DUP':
                #print('Making up a radius for {} (type=PSF, DUP)!'.format(out['GALAXY'][igal]))
                r50 = r50min # arcsec
            else:
                r50 = gal['SHAPEEXP_R'] # [arcsec]
        elif typ == 'COMP':
            fracdev = gal['FRACDEV']
            eeexp = np.hypot(gal['SHAPEEXP_E1'], gal['SHAPEEXP_E2'])
            eedev = np.hypot(gal['SHAPEDEV_E1'], gal['SHAPEDEV_E2'])
            paexp = 180 - (-np.rad2deg(np.arctan2(gal['SHAPEEXP_E2'], gal['SHAPEEXP_E1']) / 2))
            padev = 180 - (-np.rad2deg(np.arctan2(gal['SHAPEDEV_E2'], gal['SHAPEDEV_E1']) / 2))
            r50exp = gal['SHAPEEXP_R']
            r50dev = gal['SHAPEDEV_R']
            if True:
                ee = fracdev * eedev + (1 - fracdev) * eeexp
                pa = fracdev * padev + (1 - fracdev) * paexp            
                r50 = fracdev * r50dev + (1 - fracdev) * r50exp # [arcsec]
            else:
                if r50dev >= r50exp:
                    ee = eedev
                    pa = padev
                    r50 = r50dev
                else:
                    ee = eeexp
                    pa = paexp
                    r50 = r50exp
            #print(out['GALAXY'][igal], fracdev, r50exp, r50dev, r50)
        else:
            print('Doom!')
            pdb.set_trace()

        # enforce a minimum size
        if r50 < r50min:
            r50 = r50min
                
        ba = (1 - ee) / (1 + ee)
        pa = pa % 180
        theta = (270 - pa) % 180
        d25 = 2 * r50 / 60.0 # radius-->diameter and no fudge factor [arcmin]
        #d25 = 1.5 * 2 * r50 / 60.0 # radius-->diameter and then r50-->R(25) fudge factor [arcmin]

        #if out['GALAXY'][igal] == 'DR8-3420m507-2246':
        #    pdb.set_trace()

        #if (supp['BRICKID'][igal] == 628872) * (supp['OBJID'][igal] == 3436):
        #    pdb.set_trace()

        out['BA'][igal] = ba.astype('f4')
        out['PA'][igal] = pa.astype('f4')
        out['D25'][igal] = d25.astype('f4')

    out['REF'] = 'DR8'

    fix = np.where(out['GALAXY'] == 'DR8-1647m070-5067')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['PA'][fix] = 135
        out['BA'][fix] = 0.5 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-2831p685-212')[0]
    if len(fix) > 0:
        out['D25'][fix] = 30/60.0 # eyeballed
        out['BA'][fix] = 0.5 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-1032p525-176')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.5 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0204m140-5091')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-2212p270-3349')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0826m615-2794')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-3441m090-2421')[0]
    if len(fix) > 0:
        out['D25'][fix] = 1.5 # eyeballed
        out['BA'][fix] = 0.3 # eyeballed
        out['PA'][fix] = 10 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-2831p685-212')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['BA'][fix] = 0.3 # eyeballed
        out['PA'][fix] = 90 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0211p045-1034')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.8 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-3161m595-756')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.5 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0555m570-754')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0861m477-2268')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0628m475-736')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0923m475-590')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0923m475-1726')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.5 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0166m470-1080')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0569m440-804')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-3496m430-4309')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['PA'][fix] = 25 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0167m132-599')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-1658m042-3366')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.25 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0356m040-4639')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.25 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-2398p030-1289')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0226p027-5571')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.5 # eyeballed
        out['PA'][fix] = 0.0 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-2322p075-174')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-2302p077-1557')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-1502p095-3160')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.5 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-2599p110-1415')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.5 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-2403p160-3198')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0356p172-1690')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0342p192-1779')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0356p195-3981')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.6 # eyeballed
        out['PA'][fix] = 45 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0350p205-4515')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-2217p207-3898')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-0351p210-2754')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.5 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-2645p227-1972')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BA'][fix] = 1.0 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-1790p250-3335')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-1974p402-694')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-1989p420-3281')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-2478p425-1079')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-1668p477-2900')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.25 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-2406p475-547')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-2404p472-2595')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.4 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-1139p502-2329')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BA'][fix] = 1.0
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-2227p507-2101')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-1016p555-260')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.3 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-1802p562-1472')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.25 # eyeballed
        out['BYHAND'][fix] = True

    fix = np.where(out['GALAXY'] == 'DR8-1807p580-207')[0]
    if len(fix) > 0:
        out['D25'][fix] = 0.25 # eyeballed
        out['BYHAND'][fix] = True

    # Inspect
    #imagetool_inspect(out[(out['D25'] < 20/60)*(out['TYPE'] != 'PSF')])
    #pdb.set_trace()

    ## Double-check for duplicates
    #m1, m2, d12 = match_radec(parent['RA'], parent['DEC'], out['RA'], out['DEC'], 5/3600.0, nearest=True)
    #if len(m1) > 0:
    #    print('Removing {} duplicates.'.format(len(m1)))
    #    keep = np.delete(np.arange(len(out)), m2)
    #    out = out[keep]
    #assert(len(m1) == 0)

    parent = vstack((parent, out))

    return parent

def remove_spurious(parent, silent=False):
    """Remove spurious galaxies.

    """
    from legacyhalos.misc import is_in_ellipse

    # Read the file from Schlegel--
    rejfile = os.path.join(sampledir, 'catalogs', 'lslga-dr8-psf-reject.txt')
    rejid, rejra, rejdec = np.loadtxt(rejfile, unpack=True)
    print('Read {} spurious galaxies from {}'.format(len(rejid), rejfile))
    rejgal = parent[np.isin(parent['ID'], rejid)]['GALAXY'].data

    rejfile = os.path.join(sampledir, 'catalogs', 'lslga-spurious.txt')
    spurgal = np.loadtxt(rejfile, dtype=str)
    print('Read spurious {} galaxies from {}'.format(len(spurgal), rejfile))

    rejgalfinal = np.unique(np.concatenate((spurgal, rejgal)))

    gal = np.array([onegal.strip() for onegal in parent['GALAXY']])
    #rejgal = parent[~np.isin(parent['GALAXY'], rejgalaxies)]

    notspuriouscut = ~np.isin(gal, rejgalfinal)
    if np.sum(notspuriouscut) > 0:
        print('  Removed {}/{} ({:.2f}%) known spurious galaxies.'.format(
            np.sum(~notspuriouscut), len(parent), 100*np.sum(~notspuriouscut)/len(parent)))
        parent = parent[notspuriouscut]

    # Require a magnitude estimate. Unfortunately many of these are real
    # galaxies, although either their positions or their geometry is totally
    # unreliable.
    #_viewer_inspect(parent[np.isnan(parent['MAG']) * parent['IN_DESI']])
    magcut = np.isfinite(parent['MAG'])
    if np.sum(magcut) > 0:
        print('  Removed {}/{} ({:.2f}%) objects with no magnitude estimate.'.format(
            np.sum(~magcut), len(parent), 100*np.sum(~magcut)/len(parent)))
        #parent[~magcut].write(os.path.join(sandboxdir, 'LSLGA-{}-nomagnitude.fits'.format(version)), overwrite=True)
        parent = parent[magcut]

    # Toss out all SDSS and 2MASS galaxies "near" another large galaxy.  Many of
    # these are spurious and the ones that are not usually have compromised
    # diameters. Hopefully the real galaxies we toss out will be fixed by visual
    # inspection and/or will be picked up by the standard pipeline.
    kdparent = tree_build_radec(parent['RA'], parent['DEC'])
    
    indx = ['SDSS' in gg or '2MAS' in gg for gg in parent['GALAXY']]
    #indx = np.where(parent['IN_DESI'] * )[0]
    #host = np.where(parent['IN_DESI'] * (parent['D25'] > 0.5) * np.logical_not(indx))[0]
    host = np.where((parent['D25'] > 0.5) * np.logical_not(indx))[0]
    
    sdssingal = np.zeros(len(parent), dtype=bool)
    for pp in parent[host]:
        I = tree_search_radec(kdparent, pp['RA'], pp['DEC'], pp['D25'] / 1.5 / 60) # 1.7 instead of 2...
        if len(I) > 1: # don't count the host galaxy itself
            these = np.array(['SDSS' in gg or '2MAS' in gg for gg in parent['GALAXY'][I]])
            if np.sum(these) > 0:
                sdssingal[I[these]] = True
        
        #phi = 180 - pp['PA']
        #ab = 1. / pp['BA']
        #e = (ab - 1) / (ab + 1)
        #ee = -np.log(1 - e)
        #angle = np.deg2rad(2. * (-phi))
        #e1 = ee * np.cos(angle)
        #e2 = ee * np.sin(angle)
        #inell = is_in_ellipse(parent['RA'][indx], parent['DEC'][indx],
        #                      pp['RA'], pp['DEC'], pp['D25'] / 2, e1, e2)
        #if np.sum(inell) > 0:
        #    pdb.set_trace()
        
    #_imagetool_inspect(parent[inspect])
    
    if np.sum(sdssingal) > 0:
        print('  Removed {}/{} ({:.2f}%) SDSS/2MASS galaxies inside another large galaxy.'.format(
            np.sum(sdssingal), len(parent), 100*np.sum(sdssingal)/len(parent)))    
        parent = parent[~sdssingal]
    
    # Visually inspect all the SDSS galaxies above a certain surface brightness;
    # most of these are spurious, but there are many we want to keep.
    #w1 = np.where(parent['IN_DESI'] * (parent['SB_D25'] > 26) * (parent['D25'] <= 0.9))[0]
    #w2 = np.where(['SDSS' in gg for gg in parent['GALAXY'][w1]])[0]
    #_imagetool_inspect(parent[w1][w2])

    #ww = np.where(parent['IN_DESI'] * (parent['SB_D25'] > 27))[0]
    #_imagetool_inspect(parent[ww])
    
    #ww = np.where(parent['IN_DESI'])[0]
    #plt.clf() #; plt.scatter(parent['MAG'][ww], parent['SB_D25'][ww], s=1)
    ##plt.scatter(parent['MAG'][ww][ii], parent['SB_D25'][ww][ii], s=1, color='orange', alpha=0.5)
    #plt.clf() ; plt.scatter(parent['D25'][ww], parent['SB_D25'][ww], s=1)
    ##plt.scatter(parent['D25'][ww][ii], parent['SB_D25'][ww][ii], s=1, color='orange', alpha=0.5)
    ##plt.axhline(y=27, ls='-', color='k')
    #plt.xscale('log')
    #plt.savefig('junk3.png')
    
    # Check all the galaxies with b/a=1--they're OK!
    #_viewer_inspect(parent[(parent['BA']==1) * parent['IN_DESI']])

    #print('  Removed {}/{} ({:.2f}%) low surface-brightness galaxies.'.format(
    #    np.sum(lsbcut), len(parent), 100*np.sum(lsbcut)/len(parent)))
    #if np.sum(lsbcut) > 0:
    #    #parent[lsbcut].write(os.path.join(sandboxdir, 'LSLGA-{}-lsb.fits'.format(version)), overwrite=True)
    #    parent = parent[~lsbcut]

    #sdss2massgal = np.array(['SDSS' in gg or '2MAS' in gg or '[' in gg or 'WINGS' in gg for gg in parent['GALAXY']])
    #print('  Removed {}/{} ({:.2f}%) SDSS/2MASS galaxies and galaxies with square brackets in their name!'.format(
    #    np.sum(sdss2massgal), len(parent), 100*np.sum(sdss2massgal)/len(parent)))
    #if np.sum(sdss2massgal) > 0:
    #    if sandbox:
    #        parent[sdss2massgal].write(os.path.join(sandboxdir, 'LSLGA-{}-sdss2mass.fits'.format(
    #            version)), overwrite=True)
    #    parent = parent[~sdss2massgal]

    return parent

def build_group_catalog(cat, mfac=2.0, dmax=10.0/60.0):
    """dmax in arcmin

    Group LSLGA galaxies together where their circular radii would overlap.  Use
    the catalog D25 diameters (in arcmin) multiplied by a scaling factor MFAC.
    The output catalog adds the column GROUP_ID which is unique for each group.
    The column MULT_GROUP is the multiplicity of that galaxy's group.

    """
    from pydl.pydlutils.spheregroup import spheregroup
    from astrometry.util.starutil_numpy import degrees_between

    print('Starting spheregrouping.')

    nchar = np.max([len(gg) for gg in cat['GALAXY']])+6 # add six characters for "_GROUP"
    
    t0 = time.time()
    cat.add_column(Column(name='GROUP_ID', data=np.zeros(len(cat), dtype=np.int)-1))
    cat.add_column(Column(name='GROUP_NAME', length=len(cat), dtype='<U{}'.format(nchar)))
    cat.add_column(Column(name='GROUP_MULT', data=np.zeros(len(cat), dtype=np.int16)))
    cat.add_column(Column(name='GROUP_PRIMARY', data=np.zeros(len(cat), dtype=bool)))
    cat.add_column(Column(name='GROUP_RA', length=len(cat), dtype='f8')) # diameter-weighted center
    cat.add_column(Column(name='GROUP_DEC', length=len(cat), dtype='f8'))
    cat.add_column(Column(name='GROUP_DIAMETER', length=len(cat), dtype='f4'))

    #ww = np.where((parent['RA'] > 177) * (parent['RA'] < 178) * (parent['DEC'] > -1.5) * (parent['DEC'] < -0.5))[0]
    #ww = np.where((parent['RA'] > 200) * (parent['RA'] < 240) * (parent['DEC'] > 20))[0]
    #ww = np.where((parent['RA'] > 193) * (parent['RA'] < 196) * (parent['DEC'] > 26) * (parent['DEC'] < 30))[0]
    
    # Initialize a unique group number for each galaxy
    gnum = np.arange(len(cat)).astype(np.int)
    mgrp = np.ones(len(cat)).astype(np.int16)
    
    # First group galaxies within 10 arcmin, setting those to have the same
    # group number
    t0 = time.time()
    print('Spheregrouping took...', end='')
    ingroup, group_mult, firstgroup, nextgroup = spheregroup(cat['RA'], cat['DEC'], dmax)

    ngroup = np.count_nonzero(firstgroup != -1)
    for ii in np.arange(ngroup):
        #print(ii, ngroup)
        nn = group_mult[ii] # number of galaxies in this group
        if nn > 1:
            # Build INDX as the indices of all objects in this grouping
            indx = np.zeros(nn, dtype=int)
            indx[0] = firstgroup[ii]
            for jj in np.arange(nn-1):
                indx[jj+1] = nextgroup[indx[jj]]
            # Look at all pairs within this grouping to see if they should be connected.
            for jj in np.arange(nn-1):
                for kk in np.arange(jj, nn):
                    dd = degrees_between(cat['RA'][indx[jj]], cat['DEC'][indx[jj]], cat['RA'][indx[kk]], cat['DEC'][indx[kk]])
                    # If these two galaxies should be connected, make GNUM the
                    # same for them...
                    #print(dd, mfac * (cat['D25'][indx[jj]] / 60. + cat['D25'][indx[kk]] / 60.))
                    if dd < (0.5 * mfac * (cat['D25'][indx[jj]] / 60. + cat['D25'][indx[kk]] / 60.)):
                        jndx = np.where(np.logical_or(gnum[indx]==gnum[indx[jj]], gnum[indx]==gnum[indx[kk]]))[0]
                        gnum[indx[jndx]] = gnum[indx[jndx[0]]]
                        mgrp[indx[jndx]] = len(jndx)
            #print(ii, ngroup, gnum[indx], mgrp[indx])

    # Special-case the largest galaxies, looking for neighbhors
    ibig = np.where(cat['D25'] / 60. > dmax)[0]
    if len(ibig) > 0:
        for ii in np.arange(len(ibig)):
           dd = degrees_between(cat['RA'][ibig[ii]], cat['DEC'][ibig[ii]], cat['RA'], cat['DEC'])
           inear = np.where(dd < 0.5*(cat[ibig[ii]]['D25'] + cat['D25']) / 60.)[0]
           if len(inear) > 0:
               for jj in np.arange(len(inear)):
                  indx = np.where(np.logical_or(gnum==gnum[ibig[ii]], gnum==gnum[inear[jj]]))[0]
                  gnum[indx] = gnum[indx[0]]
                  mgrp[indx] = len(indx)
    print('...{:.3f} min'.format((time.time() - t0)/60))

    npergrp, _ = np.histogram(gnum, bins=len(gnum), range=(0, len(gnum)))

    print('Found {} total groups, including:'.format(len(set(gnum))))
    print('  {} groups with 1 member'.format(np.sum( (npergrp == 1) ).astype('int')))
    print('  {} groups with 2 members'.format(np.sum( (npergrp == 2) ).astype('int')))
    print('  {} group(s) with 3-5 members'.format(np.sum( (npergrp >= 3)*(npergrp <= 5) ).astype('int')))
    print('  {} group(s) with 6-10 members'.format(np.sum( (npergrp >= 6)*(npergrp <= 10) ).astype('int')))
    print('  {} group(s) with >10 members'.format(np.sum( (npergrp > 10) ).astype('int')))

    cat['GROUP_ID'] = gnum
    cat['GROUP_MULT'] = mgrp

    I = np.where(cat['GROUP_MULT'] == 1)[0]
    if len(I) > 0:
        cat['GROUP_RA'][I] = cat['RA'][I]
        cat['GROUP_DEC'][I] = cat['DEC'][I]
        cat['GROUP_DIAMETER'][I] = cat['D25'][I]
        cat['GROUP_NAME'][I] = cat['GALAXY'][I]
        cat['GROUP_PRIMARY'][I] = True

    more = np.where(cat['GROUP_MULT'] > 1)[0]
    for group in set(cat['GROUP_ID'][more]):
        I = np.where(cat['GROUP_ID'] == group)[0]
        # Compute the D25-weighted RA, Dec of the group:
        weight = cat[I]['D25']
        cat['GROUP_RA'][I] = np.sum(weight * cat[I]['RA']) / np.sum(weight)
        cat['GROUP_DEC'][I] = np.sum(weight * cat[I]['DEC']) / np.sum(weight)
        # Get the diameter of the group as the distance between the center of
        # the group and the outermost galaxy (plus the diameter of that galaxy,
        # in case it's a big one!).
        dd = degrees_between(cat['RA'][I], cat['DEC'][I], cat['GROUP_RA'][I[0]], cat['GROUP_DEC'][I[0]])
        pad = dd + cat['D25'][I] / 60.0
        cat['GROUP_DIAMETER'][I] = np.max(pad) * 60 # [arcmin]
        if cat['GROUP_DIAMETER'][I[0]] < np.max(cat['D25'][I]):
            print('Should not happen!')
            pdb.set_trace()

        # Assign the group name based on its largest member and also make this
        # galaxy "primary".
        primary = np.argmax(cat['D25'][I])
        cat['GROUP_NAME'][I] = '{}_GROUP'.format(cat['GALAXY'][I][primary])
        cat['GROUP_PRIMARY'][I[primary]] = True

    print('Building a group catalog took {:.3f} min'.format((time.time() - t0)/60))
        
    return cat
    
def main():
    import argparse
    
    parser = argparse.ArgumentParser()
    parser.add_argument('--d25min', type=float, default=20/60., help='Minimum diameter [arcmin].')
    parser.add_argument('--d25max', type=float, default=180.0, help='Maximum diameter [arcmin].')
    parser.add_argument('--nside', type=int, default=512, help='Healpix size.')
    parser.add_argument('--skip-spheregroup', action='store_true', help='Skip spheregrouping (useful for testing).')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')
    args = parser.parse_args()

    version = LSLGA.io.parent_version()
    parentfile = LSLGA.io.get_parentfile(version=version)
    kdparentfile = LSLGA.io.get_parentfile(version=version, kd=True)

    if os.path.isfile(parentfile) and not args.clobber:
        print('Output file {} exists; use clobber.'.format(parentfile))
        sys.exit(1)

    print('Working on LSLGA {}'.format(version))

    # Read the full Hyperleda catalog and immediately remove unwanted columns--
    parent = LSLGA.io.read_hyperleda(verbose=True, allwise=False)
    remcols = ['OBJTYPE', 'BT', 'VT', 'IT', 'KT', 'MODBEST',
               'DIAM_ISO', 'BA_ISO', 'DIAM_B', 'BA_B', 'DIAM_V', 'BA_V',
               'DIAM_R', 'BA_R', 'DIAM_I', 'BA_I', 'DIAM_K', 'BA_K',
               'BAR', 'RING', 'MULTIPLE', 'COMPACTNESS', 'T', 'DIAM_REF',
               'MAG_REF']
    for col in remcols:
        parent.remove_columns(col)

    # Repair some quantities "by hand". Do this first because some objects get
    # bumped above our diameter cut (e.g., UGC504).
    parent = fix_byhand(parent)

    # Apply a minimum and maximum diameter cut.
    parent = apply_diamcut(parent, args.d25min, args.d25max)

    # Useful for testing to find galaxies in and out of the footprint here--
    #parent = in_footprint(parent, nside=args.nside)

    # Add in the LG dwarfs and the DR8-identified "large" galaxies from
    # Stephanie--
    parent = add_localgroup_dwarfs(parent)
    parent = add_rc3(parent)
    parent = add_ngc(parent)

    # Remove spurious sources (based on visual inspection) before *and* after we
    # add in the DR8 galaxies, because we look for duplicates at the top of
    # add_dr8_candidates and because we do reject some DR8-supplement galaxies.
    parent = remove_spurious(parent)
    parent = add_dr8_candidates(parent)
    parent = remove_spurious(parent)

    pdb.set_trace()

    #ww = np.where(parent['ID'] > 6e6)[0]
    #imagetool_inspect(parent[ww])
    #pdb.set_trace()

    print('ToDo: Inspect all the <20 arcsec systems...')
    
    # Some final checks (must be after spurious sources have been removed,
    # because we toss out galaxies without magnitude estimates).
    try:
        assert(np.all(parent['D25'] > 0))
        assert(np.all(parent['MAG'] > 0))
        assert(np.all(np.isfinite(parent['PA'])))
        assert(np.all((parent['PA'] >= 0)*(parent['PA'] <= 180)))
        assert(np.all((parent['BA'] > 0)*(parent['BA'] <= 1)))
        assert(len(parent['ID']) == len(np.unique(parent['ID'])))
    except:
        print('Problem here!')
        pdb.set_trace()

    # Recompute the surface brightness, for consistency.
    parent['SB_D25'] = parent['MAG'] + 2.5 * np.log10( np.pi * (60/2)**2 ) + 5 * np.log10(parent['D25'])

    # Replace special characters in the GALAXY names to not create problems
    # (e.g., with fitsio) downstream.
    print('Removing special characters from galaxy names.')
    fix = np.where(['[' in gg or ':' in gg for gg in parent['GALAXY']])[0]
    if len(fix) > 0:
        for ii in fix:
            parent['BYHAND'][ii] = True
            parent['GALAXY'][ii] = parent['GALAXY'][ii].replace('[', '').replace(']', '_').replace(':', '_')

    fix = np.where(parent['PGC'] == 0)[0]
    if len(fix) > 0:
        parent['PGC'][fix] = -1
    
    fix = np.where(parent['MORPHTYPE'] == 'nan')[0]
    if len(fix) > 0:
        parent['MORPHTYPE'][fix] = ''
    
    # Find all galaxies in and out of the DESI footprint.
    parent = in_footprint(parent, nside=args.nside)

    # Build a group catalog--
    if args.skip_spheregroup:
        print('Skipping group catalog-making!')
    else:
        parent = build_group_catalog(parent)

    # Flag galaxies near bright stars (I guess we don't need this anymore)--
    if False:
        parent, kdparent = near_stars(parent)

    # Update the data model.
    cols = parent.colnames
    parent.rename_column('TYPE', 'MORPHTYPE')
    for col in ['Z', 'PA', 'D25', 'BA', 'SB_D25', 'MAG']:
        parent.rename_column(col, '{}_LEDA'.format(col))
    parent.remove_columns(['IN_DESI_NORTH', 'IN_DESI_SOUTH', 'IN_DESI_NORTH_GRZ', 'IN_DESI_SOUTH_GRZ'])

    #ii = np.where(np.array(parent.colnames) == 'REF')[0][0]
    #parent.add_column(Column(name='BA', data=np.zeros(len(parent), 'f4')), index=ii)
    #parent.add_column(Column(name='PA', data=np.zeros(len(parent), 'f4')), index=ii)
    #parent.add_column(Column(name='DIAM_REF', data=np.zeros(len(parent), 'U4')), index=ii)
    #parent.add_column(Column(name='DIAM', data=np.zeros(len(parent), 'f4')), index=ii)

    parent['DIAM'] = parent['D25_LEDA']
    parent['DIAM_REF'] = 'LEDA'
    parent['PA'] = parent['PA_LEDA']
    parent['BA'] = parent['BA_LEDA']
    parent['ELLIPSEBIT'] = np.zeros(len(parent), dtype=np.int32) # warning bit

    print('Writing {} galaxies to {}'.format(len(parent), parentfile))
    #parent.write(parentfile, overwrite=True)
    hdr = fitsio.FITSHDR()
    hdrversion = 'L{}'.format(version[1:2]) # fragile!
    hdr['LSLGAVER'] = hdrversion
    fitsio.write(parentfile, parent.as_array(), header=hdr, clobber=True)

    # Hack!
    cmd = 'modhead {} LSLGAVER {}'.format(parentfile, hdrversion)
    _ = os.system(cmd)

    print('Writing {}'.format(kdparentfile))
    cmd = 'startree -i {} -o {} -T -P -k -n largegals'.format(parentfile, kdparentfile)
    #print(cmd)
    _ = os.system(cmd)

    cmd = 'modhead {} LSLGAVER {}'.format(kdparentfile, hdrversion)
    _ = os.system(cmd)

if __name__ == '__main__':
    main()

