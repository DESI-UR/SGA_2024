#!/usr/bin/env python

"""Generate the parent sample of large galaxies.

####
v3.0

* Change d25min from 20/60 arcsec to 60 arcsec.
* 

####
v2.0

Read 1436176 objects from /Users/ioannis/research/projects/LSLGA/sample/v2.0/hyperleda-d25min10-18nov14.fits
Read 1436176 objects from /Users/ioannis/research/projects/LSLGA/sample/v2.0/hyperleda-d25min10-18nov14-allwise.fits
  Identified 1379531/1436176 (96.06%) objects with AllWISE photometry.
  Removed 13273/1436176 (0.92%) objects with no magnitude estimate.
  Removed 887102/1422903 (62.34%) objects with D(25) < 20.000 arcsec and D(25) > 10000.000 arcmin.
  Removed 509/535801 (0.09%) low surface-brightness galaxies.
  Removed 2585/535292 (0.48%) SDSS galaxies inside another large galaxy.
Read 20070 DESI tiles from /Users/ioannis/research/projects/LSLGA/sample/desi-tiles.fits
  Identified 287853/532707 (54.04%) galaxies inside and 244854/532707 (45.96%) galaxies outside the DESI footprint.
Read 2557319 Tycho-2 stars with B<99.0.
  Found 6068/532707 (1.14%) galaxies near a bright (Tycho-2) star.
Final sample size: 532707 galaxies.
Writing 532707 galaxies to /Users/ioannis/research/projects/LSLGA/sample/v2.0/LSLGA-v2.0.fits
Writing /Users/ioannis/research/projects/LSLGA/sample/v2.0/LSLGA-v2.0.kd.fits

"""
import os, sys, argparse, pdb
import numpy as np

import fitsio
import astropy.table

import LSLGA.io
import LSLGA.misc

def remove_spurious(parent):

    spurgal = np.array([
    # https://github.com/moustakas/LSLGA/issues/14
        'PGC051192', 
        'UGC10822',
        'PGC1944170',
        'PGC5955876',
        'SDSSJ021529.42+010322.6',
    # visual inspection
        'SDSSJ083809.55+251926.4',
    # added since making v3.0
        '2MASXJ21412930+0053356',
        'SDSSJ140511.30+060559.4',
        ])

    gal = np.array([onegal.strip() for onegal in parent['GALAXY']])

    return ~np.isin(gal, spurgal)

def build_parent(d25min=0.75, d25max=1e4, verbose=False):
    """Build the parent catalog.
    
    """
    from astropy.table import Column
    from astrometry.libkd.spherematch import tree_build_radec, tree_search_radec

    version = LSLGA.io.parent_version()
    sandboxdir = os.path.join(LSLGA.io.sample_dir(), version, 'sandbox')
    if not os.path.isdir(sandboxdir):
        os.makedirs(sandboxdir, exist_ok=True)

    # Read the full Hyperleda catalog and assign a unique ID.
    leda = LSLGA.io.read_hyperleda(verbose=True)
    parent = leda.copy()
    parent.add_column(Column(name='LSLGA_ID', length=len(parent), dtype='i8'), index=0)
    parent['LSLGA_ID'] = np.arange(len(parent))

    # Repair some incorrect diameters and other properties in Hyperleda.  Use
    # the WXSC (https://vislab.idia.ac.za/research)

    # Sculptor https://github.com/moustakas/LSLGA/issues/27
    # use RC3 valuehttp://leda.univ-lyon1.fr/fG.cgi?n=a106&o=ESO351-030
    fix = np.where(parent['PGC'] == 3589)[0] 
    if len(fix) > 0:
        parent['D25'][fix] = 0.1 * 10**2.700 # [arcmin]

    # NGC4395 https://github.com/moustakas/LSLGA/issues/28
    fix = np.where(parent['PGC'] == 40596)[0] 
    if len(fix) > 0:
        parent['D25'][fix] = 12.8 # [arcmin]
        parent['BA'][fix] = 0.833
        parent['SB_D25'][fix] = parent['MAG'][fix] + 2.5 * np.log10( np.pi * (60/2)**2 ) + \
          5 * np.log10(parent['D25'][fix])

    # NGC2366 https://github.com/moustakas/LSLGA/issues/29
    fix = np.where(parent['PGC'] == 21102)[0]
    if len(fix) > 0:
        parent['D25'][fix] = 8.8964 # [arcmin]
        parent['BA'][fix] = 0.5263
        parent['SB_D25'][fix] = parent['MAG'][fix] + 2.5 * np.log10( np.pi * (60/2)**2 ) + \
          5 * np.log10(parent['D25'][fix])

    # Require a magnitude estimate.
    magcut = np.isfinite(parent['MAG'])
    print('  Removed {}/{} ({:.2f}%) objects with no magnitude estimate.'.format(
        np.sum(~magcut), len(parent), 100*np.sum(~magcut)/len(parent)))
    if np.sum(magcut) > 0:
        parent[~magcut].write(os.path.join(sandboxdir, 'LSLGA-{}-nomagnitude.fits'.format(version)), overwrite=True)
        parent = parent[magcut]

    # Remove known *spurious* large galaxies (based on visual inspection, etc.).
    notspuriouscut = remove_spurious(parent)
    print('  Removed {}/{} ({:.2f}%) known spurious galaxies.'.format(
        np.sum(~notspuriouscut), len(parent), 100*np.sum(~notspuriouscut)/len(parent)))
    if np.sum(notspuriouscut) > 0:
        parent = parent[notspuriouscut]

    # Apply a minimum diameter cut.
    diamcut = (parent['D25'] >= d25min) * (parent['D25'] <= d25max)
    print('  Removed {}/{} ({:.2f}%) objects with D(25) < {:.3f} arcsec and D(25) > {:.3f} arcmin.'.format(
        np.sum(~diamcut), len(parent), 100*np.sum(~diamcut)/len(parent), d25min*60, d25max))
    if np.sum(diamcut) > 0:
        parent[~diamcut].write(os.path.join(sandboxdir, 'LSLGA-{}-diamcut.fits'.format(version)), overwrite=True)
        parent = parent[diamcut]

    # Apply a surface brightness cut.
    lsbcut = (parent['SB_D25'] > 27) * (parent['D25'] > 0.95)
    print('  Removed {}/{} ({:.2f}%) low surface-brightness galaxies.'.format(
        np.sum(lsbcut), len(parent), 100*np.sum(lsbcut)/len(parent)))
    if np.sum(lsbcut) > 0:
        parent[lsbcut].write(os.path.join(sandboxdir, 'LSLGA-{}-lsb.fits'.format(version)), overwrite=True)
        parent = parent[~lsbcut]

    # Toss out all SDSS galaxies "inside" another galaxy.  Most of these are
    # spurious and the ones that are not will hopefully be fixed by visual
    # inspection and/or will be picked up by the standard pipeline.  Note: as of
    # v4.0 we toss out *all* SDSS and 2MASS galaxies:
    #kdparent = tree_build_radec(parent['RA'], parent['DEC'])
    #sdssingal = np.zeros(len(parent), dtype=bool)
    #for pp in parent:
    #    I = tree_search_radec(kdparent, pp['RA'], pp['DEC'], pp['D25'] / 1.8 / 60) # 1.8 instead of 2...
    #    if len(I) > 1:
    #        isdss = np.array(['SDSS' in gg for gg in parent['GALAXY'][I]])
    #        if np.sum(isdss) > 0:
    #            sdssingal[I[isdss]] = True
    #print('  Removed {}/{} ({:.2f}%) SDSS galaxies inside another large galaxy.'.format(
    #    np.sum(sdssingal), len(parent), 100*np.sum(sdssingal)/len(parent)))    
    #if np.sum(sdssingal) > 0:
    #    parent[sdssingal].write(os.path.join(sandboxdir, 'LSLGA-{}-sdss-in-largegal.fits'.format(
    #        version)), overwrite=True)
    #    parent = parent[~sdssingal]    
    sdss2massgal = np.array(['SDSS' in gg or '2MASS' in gg for gg in parent['GALAXY']])
    print('  Removed {}/{} ({:.2f}%) SDSS or 2MASS galaxies.'.format(
        np.sum(sdss2massgal), len(parent), 100*np.sum(sdss2massgal)/len(parent)))
    if np.sum(sdss2massgal) > 0:
        parent[sdss2massgal].write(os.path.join(sandboxdir, 'LSLGA-{}-sdss2mass.fits'.format(version)), overwrite=True)
        parent = parent[~sdss2massgal]

    # Flag galaxies in and out of the DESI footprint.
    tiles = LSLGA.io.read_desi_tiles(verbose=verbose)
    indesi = LSLGA.misc.is_point_in_desi(tiles, parent['RA'], parent['DEC']).astype(bool)

    print('  Identified {}/{} ({:.2f}%) galaxies inside and {}/{} ({:.2f}%) galaxies outside the DESI footprint.'.format(
        np.sum(indesi), len(parent), 100*np.sum(indesi)/len(parent), np.sum(~indesi), len(parent),
        100*np.sum(~indesi)/len(parent)))
    parent['IN_DESI'] = indesi
    
    # Flag galaxies near bright stars.
    tycho = LSLGA.io.read_tycho(verbose=True)
    kdparent = tree_build_radec( parent['RA'], parent['DEC'] )

    nearstar = np.zeros( len(parent) ).astype(bool)
    for star in tycho:
        I = tree_search_radec(kdparent, star['RA'], star['DEC'], star['RADIUS'])
        if len(I) > 0:
            nearstar[I] = True
    print('  Found {}/{} ({:.2f}%) galaxies near a bright (Tycho-2) star.'.format(
        np.sum(nearstar), len(parent), 100*np.sum(nearstar)/len(parent)))
    parent['NEAR_BRIGHTSTAR'] = nearstar

    # Remove some unnecessary columns
    parent.remove_columns(('OBJTYPE', 'BT', 'VT', 'IT', 'KT', 'MODBEST',
                           'DIAM_ISO', 'BA_ISO', 'DIAM_B', 'BA_B', 'DIAM_V', 'BA_V',
                           'DIAM_R', 'BA_R', 'DIAM_I', 'BA_I', 'DIAM_K', 'BA_K'))

    print('Final sample size: {} galaxies.'.format(len(parent)))

    return parent, kdparent

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--d25min', type=float, default=0.75, help='Minimum diameter [arcmin].')
    parser.add_argument('--d25max', type=float, default=1e4, help='Maximum diameter [arcmin].')
    parser.add_argument('--verbose', action='store_true', help='Be verbose!')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')
    args = parser.parse_args()

    version = LSLGA.io.parent_version()
    parentfile = LSLGA.io.get_parentfile()
    kdparentfile = LSLGA.io.get_parentfile(kd=True)
    
    if os.path.isfile(parentfile) and not args.clobber:
        print('Output file {} exists; use clobber.'.format(parentfile))
        sys.exit(1)

    parent, kdparent = build_parent(verbose=args.verbose, d25min=args.d25min,
                                    d25max=args.d25max)

    if args.verbose:
        print('Writing {} galaxies to {}'.format(len(parent), parentfile))
    
    #parent.write(parentfile, overwrite=True)
    hdr = fitsio.FITSHDR()
    hdrversion = 'L{}'.format(version[1:2]) # fragile!
    hdr['LSLGAVER'] = hdrversion
    fitsio.write(parentfile, parent.as_array(), header=hdr, clobber=True)

    # Hack!
    cmd = 'modhead {} LSLGAVER {}'.format(parentfile, hdrversion)
    _ = os.system(cmd)

    if args.verbose:
        print('Writing {}'.format(kdparentfile))
    cmd = 'startree -i {} -o {} -T -P -k -n largegals'.format(parentfile, kdparentfile)
    #print(cmd)
    _ = os.system(cmd)

    cmd = 'modhead {} LSLGAVER {}'.format(kdparentfile, hdrversion)
    _ = os.system(cmd)

if __name__ == '__main__':
    main()

