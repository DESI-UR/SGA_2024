#!/usr/bin/env python

"""Generate the parent sample of large galaxies.

Read 1436176 objects from /Users/ioannis/research/projects/LSLGA/sample/hyperleda-d25min10-18nov14.fits
Read 1436176 objects from /Users/ioannis/research/projects/LSLGA/sample/hyperleda-d25min10-18nov14-allwise.fits
  Identified 1436176/1436176 (100.00%) objects with AllWISE photometry.
  Removed 13273/1436176 (0.92%) objects with no magnitude estimate.
  Removed 0/1422903 (0.00%) objects with D(25) < 0.000 arcsec and D(25) > 10000.000 arcmin.
  Identified 911206/1422903 (64.04%) galaxies inside and 511697/1422903 (35.96%) galaxies outside the DESI footprint.
Read 2557319 Tycho-2 stars with B<99.0.
  Found 13195/1422903 (0.93%) galaxies near a bright (Tycho-2) star.

"""
import os, sys, argparse
import numpy as np

import LSLGA.io
import LSLGA.misc

def build_parent(d25min=20/60, d25max=1e4, verbose=False):
    """Build the parent catalog.
    
    """
    import numpy.ma as ma
    from astropy.table import Column
    from astrometry.libkd.spherematch import tree_build_radec, tree_search_radec

    version = LSLGA.io.parent_version()
    sandboxdir = os.path.join(LSLGA.io.sample_dir(), version, 'sandbox')
    if not os.path.isdir(sandboxdir):
        os.makedirs(sandboxdir, exist_ok=True)

    # Read the full Hyperleda catalog and assign a unique ID.
    leda = LSLGA.io.read_hyperleda(verbose=True)
    parent = leda.copy()
    parent.add_column(Column(name='LSLGA_ID', length=len(parent), dtype='i8'), index=0)
    parent['LSLGA_ID'] = np.arange(len(parent))

    # Require a magnitude estimate.
    magcut = np.isfinite( parent['MAG'] )
    print('  Removed {}/{} ({:.2f}%) objects with no magnitude estimate.'.format(
        np.sum(~magcut), len(parent), 100*np.sum(~magcut)/len(parent)))
    parent[~magcut].write(os.path.join(sandboxdir, 'LSLGA-{}-nomagnitude.fits'.format(version)), overwrite=True)
    parent = parent[magcut]

    # Apply a minimum diameter cut.
    diamcut = (parent['D25'] >= d25min) * (parent['D25'] <= d25max)
    print('  Removed {}/{} ({:.2f}%) objects with D(25) < {:.3f} arcsec and D(25) > {:.3f} arcmin.'.format(
        np.sum(~diamcut), len(parent), 100*np.sum(~diamcut)/len(parent), d25min*60, d25max))
    parent[~diamcut].write(os.path.join(sandboxdir, 'LSLGA-{}-diamcut.fits'.format(version)), overwrite=True)
    parent = parent[diamcut]

    # Apply a surface brightness cut.
    lsbcut = (parent['SB_D25'] > 27) * (parent['D25'] > 0.95)
    print('  Removed {}/{} ({:.2f}%) low surface-brightness galaxies.'.format(
        np.sum(lsbcut), len(parent), 100*np.sum(lsbcut)/len(parent)))
    parent[lsbcut].write(os.path.join(sandboxdir, 'LSLGA-{}-lsb.fits'.format(version)), overwrite=True)
    parent = parent[~lsbcut]

    # Reject objects classified as "g"
    # objnotg = np.hstack([np.char.strip(obj) != 'g' for obj in parent['objtype']])
    # print('  Removed {} objects with objtype == g'.format(np.sum(~objnotg)), flush=True)

    #keep = np.where( indesi * diamcut )[0]
    #parent.add_column(Column(name='LSLGA_ID', length=len(parent), dtype='i8'), index=0)
    #parent['LSLGA_ID'] = np.arange(len(parent))
    
    # Flag galaxies in and out of the DESI footprint.
    tiles = LSLGA.io.read_desi_tiles(verbose=verbose)
    indesi = LSLGA.misc.is_point_in_desi(tiles, ma.getdata(parent['RA']), ma.getdata(parent['DEC'])).astype(bool)

    print('  Identified {}/{} ({:.2f}%) galaxies inside and {}/{} ({:.2f}%) galaxies outside the DESI footprint.'.format(
        np.sum(indesi), len(parent), 100*np.sum(indesi)/len(parent), np.sum(~indesi), len(parent),
        100*np.sum(~indesi)/len(parent)))
    parent['IN_DESI'] = indesi
    
    # Flag galaxies near bright stars.
    tycho = LSLGA.io.read_tycho(verbose=True)
    kdparent = tree_build_radec(parent['RA'], parent['DEC'])

    nearstar = np.zeros( len(parent) ).astype(bool)
    for star in tycho:
        I = tree_search_radec(kdparent, star['RA'], star['DEC'], star['RADIUS'])
        if len(I) > 0:
            nearstar[I] = True
    print('  Found {}/{} ({:.2f}%) galaxies near a bright (Tycho-2) star.'.format(
        np.sum(nearstar), len(parent), 100*np.sum(nearstar)/len(parent)))
    parent['NEAR_BRIGHTSTAR'] = nearstar

    print('Final sample size: {} galaxies.'.format(len(parent)))

    return parent, kdparent

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--d25min', type=float, default=10/60, help='Minimum diameter [arcmin].')
    parser.add_argument('--d25max', type=float, default=1e4, help='Maximum diameter [arcmin].')
    parser.add_argument('--verbose', action='store_true', help='Be verbose!')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')
    args = parser.parse_args()

    parentfile = LSLGA.io.get_parentfile()
    kdparentfile = LSLGA.io.get_parentfile(kd=True)
    
    if os.path.isfile(parentfile) and not args.clobber:
        print('Output file {} exists; use clobber.'.format(parentfile))
        sys.exit(1)

    parent, kdparent = build_parent(verbose=args.verbose)

    if args.verbose:
        print('Writing {} galaxies to {}'.format(len(parent), parentfile))
    parent.write(parentfile, overwrite=True)

    if args.verbose:
        print('Writing {}'.format(kdparentfile))
    cmd = 'startree -i {} -o {} -T -P -k -n largegals'.format(parentfile, kdparentfile)
    #print(cmd)
    _ = os.system(cmd)

if __name__ == '__main__':
    main()

