#!/usr/bin/env python

"""Run the LSLGA pipeline on the MaNGA-NSA sample.

manga-nsa --ellipse --first 2487 --last 2487
manga-nsa --html --first 2487 --last 2487

"""
import os, argparse, sys, time
import pdb
import numpy as np
import matplotlib.pyplot as plt

import fitsio
from astropy.table import Table
from astrometry.util.fits import fits_table
from legacypipe.survey import LegacySurveyData

import LSLGA.manga
from LSLGA.manga import RADIUSFACTOR

def get_survey_dir(onegal):
    if onegal['DR'] == 'DR6':
        return '/global/project/projectdirs/cosmo/work/legacysurvey/dr6'
    elif onegal['DR'] == 'DR7':
        return '/global/project/projectdirs/cosmo/work/legacysurvey/dr7'
    else:
        print('Unrecognized DR!')
        raise ValueError
    return

def missing_files(sample, filedir='.', filetype='coadds',
                  size=1, clobber=False):
    """Find missing data of a given filetype."""    

    if filetype == 'coadds':
        filesuffix = 'pipeline-resid-grz.jpg'
    elif filetype == 'custom_coadds':
        filesuffix = 'custom-resid-grz.jpg'
    elif filetype == 'unwise':
        filesuffix = 'resid-W1W2.jpg'
    elif filetype == 'galex':
        filesuffix = 'resid-FUVNUV.jpg'
    elif filetype == 'ellipse':
        filesuffix = 'ellipsefit.p'
    elif filetype == 'html':
        filesuffix = 'junk'
    else:
        print('Unrecognized file type!')
        raise ValueError

    ngal = len(sample)
    indices = np.arange(ngal)
    todo = np.ones(ngal, dtype=bool)

    for ii, onegal in enumerate(np.atleast_1d(sample)):
        galaxy = onegal['MANGAID']
        if type(galaxy) is np.bytes_:
            galaxy = galaxy.decode('utf-8')
        checkfile = os.path.join(filedir, galaxy, '{}-{}'.format(galaxy, filesuffix))
        if os.path.exists(checkfile) and clobber is False:
            todo[ii] = False

    if np.sum(todo) == 0:
        return list()
    else:
        indices = indices[todo]

    if size == 1:
        return indices
    else:
        return np.array_split(indices, size)

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--nproc', default=4, type=int, help='number of multiprocessing processes.')
    parser.add_argument('--pixscale', default=0.262, type=float, help='optical pixel scale (arcsec/pix).')
    parser.add_argument('--unwise-pixscale', default=2.75, type=float, help='unWISE pixel scale (arcsec/pix).')
    parser.add_argument('--galex-pixscale', default=1.5, type=float, help='unWISE pixel scale (arcsec/pix).')

    parser.add_argument('--coadds', action='store_true', help='Build the pipeline coadds.')
    parser.add_argument('--custom-coadds', action='store_true', help='Build the custom coadds.')
    parser.add_argument('--unwise', action='store_true', help='Build the unWISE coadds.')
    parser.add_argument('--galex', action='store_true', help='Build the GALEX coadds.')
    parser.add_argument('--ellipse', action='store_true', help='Do the ellipse fitting.')
    parser.add_argument('--html', action='store_true', help='Make plots for the webpage!')

    parser.add_argument('--first', type=int, help='First galaxy to process.', default=2487)#None)
    parser.add_argument('--last', type=int, help='Last galaxy to process.', default=2487)#None)
    parser.add_argument('--force', action='store_true', help='Use with --coadds; ignore previous pickle files.')
    parser.add_argument('--count', action='store_true', help='Count how many objects are left to analyze and then return.')
    parser.add_argument('--nomakeplots', action='store_true', help='Do not remake the QA plots.')
    parser.add_argument('--debug', action='store_true', help='Log to STDOUT and build debugging plots.')
    parser.add_argument('--verbose', action='store_true', help='Be verbose!')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')                                
    args = parser.parse_args()

    analysisdir = LSLGA.manga.analysis_dir()

    # Figure out what's left to do.
    sample = LSLGA.manga.read_sample(first=args.first, last=args.last)
    
    groups, suffix = [], ''
    if args.coadds:
        suffix = 'coadds'
        groups = missing_files(sample, filedir=analysisdir, filetype=suffix, clobber=args.clobber)
    elif args.custom_coadds:
        suffix = 'custom_coadds'
        groups = missing_files(sample, filedir=analysisdir, filetype=suffix, clobber=args.clobber)
    elif args.unwise:
        suffix = 'unwise'
        groups = missing_files(sample, filedir=analysisdir, filetype=suffix, clobber=args.clobber)
    elif args.galex:
        suffix = 'galex'
        groups = missing_files(sample, filedir=analysisdir, filetype=suffix, clobber=args.clobber)
    elif args.ellipse:
        suffix = 'ellipse'
        groups = missing_files(sample, filedir=analysisdir, filetype=suffix, clobber=args.clobber)
    elif args.html:
        suffix = 'html'
        groups = missing_files(sample, filedir=analysisdir, filetype=suffix, clobber=args.clobber)
    else:
        groups = []

    if len(groups) == 0:
        ntodo = 0
    else:
        ntodo = len(np.hstack(np.atleast_1d(groups)))
        
    if ntodo == 0:
        print('{} for all {} galaxies are complete!'.format(
            suffix.upper(), len(sample)), flush=True)
        return
    else:
        print('{} left to do: {} / {} divided across {} group(s).'.format(
            suffix.upper(), ntodo, len(sample), len(groups)), flush=True)

    print('Starting {} {} at {}'.format(ntodo, suffix.upper(), time.asctime()), flush=True)

    # Generate the pipeline or custom optical coadds.
    if args.coadds or args.custom_coadds:
        from LSLGA.coadds import pipeline_coadds, custom_coadds
        survey = LegacySurveyData()

        for ii in groups:
            t0 = time.time()

            onegal = sample[ii]
            galaxy = onegal['MANGAID']
            if type(galaxy) is np.bytes_:
                galaxy = galaxy.decode('utf-8')
            radius = np.round(RADIUSFACTOR * onegal['NSA_PETRO_TH50']) # [arcsec]

            survey.survey_dir = get_survey_dir(onegal)
            survey.output_dir = os.path.join(analysisdir, galaxy)

            if args.coadds:
                err = pipeline_coadds(onegal, galaxy=galaxy, radius=radius, survey=survey,
                                      pixscale=args.pixscale, nproc=args.nproc, force=args.force)
            if args.custom_coadds:
                ccdsfile = os.path.join(survey.output_dir, '{}-ccds.fits'.format(galaxy))
                if os.path.isfile(ccdsfile):
                    survey.ccds = survey.cleanup_ccds_table( fits_table(ccdsfile) )
                    err = custom_coadds(onegal, galaxy=galaxy, radius=radius, survey=survey,
                                        pixscale=args.pixscale, nproc=args.nproc, verbose=args.verbose)
                else:
                    print('CCDs file {} not found.'.format(ccdsfile))
                    err = 0

            if err == 0:
                print('ERROR: {}; please check the logfile.'.format(galaxy), flush=True)
            print('Finished galaxy {} in {:.3f} minutes.'.format(
                galaxy, (time.time() - t0) / 60), flush=True)

    if args.unwise or args.galex:
        from LSLGA.galex import galex_coadds
        from LSLGA.unwise import unwise_coadds

        for ii in groups:
            t0 = time.time()

            onegal = sample[ii]
            galaxy = onegal['MANGAID']
            if type(galaxy) is np.bytes_:
                galaxy = galaxy.decode('utf-8')
            radius = np.round(RADIUSFACTOR * onegal['NSA_PETRO_TH50']) # [arcsec]

            output_dir = os.path.join(analysisdir, galaxy)

            if args.unwise:
                err = unwise_coadds(onegal, galaxy=galaxy, radius=radius, output_dir=output_dir,
                                    pixscale=args.unwise_pixscale, verbose=args.verbose)
            if args.galex:
                err = galex_coadds(onegal, galaxy=galaxy, radius=radius, output_dir=output_dir,
                                   pixscale=args.galex_pixscale, verbose=args.verbose)
                
            if err == 0:
                print('ERROR: {}; please check the logfile.'.format(galaxy), flush=True)
            print('Finished galaxy {} in {:.3f} sec.'.format(
                galaxy, time.time() - t0), flush=True)

    if args.ellipse:
        from legacyhalos.ellipse import legacyhalos_ellipse

        for ii in groups:
            t0 = time.time()

            onegal = sample[ii]
            galaxy = onegal['MANGAID']
            if type(galaxy) is np.bytes_:
                galaxy = galaxy.decode('utf-8')
            galaxydir = os.path.join(analysisdir, galaxy)

            maxsma = 7 * onegal['NSA_PETRO_TH50'] / args.pixscale # [pixels]

            err = legacyhalos_ellipse(onegal, galaxy=galaxy, galaxydir=galaxydir,
                                      pixscale=args.pixscale, verbose=args.verbose,
                                      band=('g', 'r', 'z'),
                                      #band=('FUV', 'NUV', 'g', 'r', 'z', 'W1', 'W2', 'W3', 'W4'),
                                      galex_pixscale=args.galex_pixscale,
                                      unwise_pixscale=args.unwise_pixscale,
                                      #integrmode='bilinear', nclip=0, 
                                      noellipsefit=True, maxsma=maxsma)
            if err == 0:
                print('ERROR: {}; please check the logfile.'.format(galaxy), flush=True)
            print('Finished galaxy {} in {:.3f} minutes.'.format(
                galaxy, (time.time() - t0) / 60), flush=True)

    if args.html:
        from LSLGA.manga import make_html

        survey = LegacySurveyData()

        make_html(sample, clobber=args.clobber, verbose=args.verbose,
                  pixscale=args.pixscale, nproc=args.nproc,
                  survey=survey, makeplots=not args.nomakeplots)

        if 'NERSC_HOST' in os.environ:
            print('Execute the following command to publish the webpage.')
            print('rsync -auvP --delete {}/* /project/projectdirs/cosmo/www/temp/ioannis/manga-nsa/'.format(
                LSLGA.manga.html_dir()))

if __name__ == '__main__':
    main()

