#!/usr/bin/env python

"""Run the LSLGA pipeline on the MaNGA-NSA sample.

"""
import os, argparse, sys, time
import pdb
import numpy as np
import matplotlib.pyplot as plt

import fitsio
from astropy.table import Table
from astrometry.util.fits import fits_table
from legacypipe.survey import LegacySurveyData

import LSLGA.manga

#mangadir = os.path.join(os.getenv('SCRATCH'), 'manga-nsa')
##mangadir = os.path.join(os.getenv('IM_PROJECTS_DIR'), 'manga-nsa')
#samplefile = os.path.join(mangadir, 'manga-nsa.fits')

def get_survey_dir(onegal):
    if onegal['DR'] == 'DR6':
        return '/global/project/projectdirs/cosmo/work/legacysurvey/dr6'
    elif onegal['DR'] == 'DR7':
        return '/global/project/projectdirs/cosmo/work/legacysurvey/dr7'
    else:
        print('Unrecognized DR!')
        raise ValueError
    return

def missing_files(sample, filedir='.', filetype='coadds',
                  size=1, clobber=False):
    """Find missing data of a given filetype."""    

    if filetype == 'coadds':
        filesuffix = 'pipeline-resid.jpg'
    elif filetype == 'custom_coadds':
        filesuffix = 'custom-resid.jpg'
    elif filetype == 'unwise':
        filesuffix = 'unwise-resid.jpg'
    elif filetype == 'galex':
        filesuffix = 'galex-resid.jpg'
    elif filetype == 'ellipse':
        filesuffix = 'ellipsefit.p'
    elif filetype == 'html':
        filesuffix = 'junk'
    else:
        print('Unrecognized file type!')
        raise ValueError

    ngal = len(sample)
    indices = np.arange(ngal)
    todo = np.ones(ngal, dtype=bool)

    for ii, onegal in enumerate(np.atleast_1d(sample)):
        galaxy = onegal['PLATEIFU']
        if type(galaxy) is np.bytes_:
            galaxy = galaxy.decode('utf-8')
        checkfile = os.path.join(filedir, galaxy, '{}-{}'.format(galaxy, filesuffix))
        if os.path.exists(checkfile) and clobber is False:
            todo[ii] = False

    if np.sum(todo) == 0:
        return list()
    else:
        indices = indices[todo]

    if size == 1:
        return indices
    else:
        return np.array_split(indices, size)

def build_sample(clobber=False):
    """Build the parent sample for this project.

    
    """
    from astropy.table import hstack
    
    mangafile = os.path.join(mangadir, 'drpall-v2_1_2.fits')
    nsafile = os.path.join(mangadir, 'nsa_v1_0_1.fits')

    if os.path.exists(samplefile) and clobber is False:
        print('Sample file {} exists; clobber?'.format(samplefile))
        return

    allmanga = Table(fitsio.read(mangafile, upper=True))
    allplateifu = [pfu.strip() for pfu in allmanga['PLATEIFU']]
    these = np.where( np.isin(allplateifu, ['7815-6104', '8256-12704', '8939-9101']) )[0]
    manga = allmanga[these]

    rows = np.array([mid[2:] for mid in manga['MANGAID']])
    srt = np.argsort(rows)
    manga = manga[srt]
    nsa = Table(fitsio.read(nsafile, rows=rows[srt], upper=True))
    nsa.rename_column('PLATE', 'PLATE_NSA')
    nsa['DR'] = ['DR7', 'DR7', 'DR6']

    sample = hstack( (manga, nsa) )
    
    print('Writing {}'.format(samplefile))
    sample.write(samplefile, overwrite=clobber)

    return sample

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--nproc', default=4, type=int, help='number of multiprocessing processes.')
    parser.add_argument('--pixscale', default=0.262, type=float, help='optical pixel scale (arcsec/pix).')
    parser.add_argument('--unwise-pixscale', default=2.75, type=float, help='unWISE pixel scale (arcsec/pix).')
    parser.add_argument('--galex-pixscale', default=1.5, type=float, help='unWISE pixel scale (arcsec/pix).')

    parser.add_argument('--build-sample', action='store_true', help='Build and write out the sample.')
    parser.add_argument('--coadds', action='store_true', help='Build the pipeline coadds.')
    parser.add_argument('--custom-coadds', action='store_true', help='Build the custom coadds.')
    parser.add_argument('--unwise', action='store_true', help='Build the unWISE coadds.')
    parser.add_argument('--galex', action='store_true', help='Build the GALEX coadds.')
    parser.add_argument('--ellipse', action='store_true', help='Do the ellipse fitting.')
    parser.add_argument('--html', action='store_true', help='Make plots for the webpage!')

    parser.add_argument('--first', default=None, type=int, help='First galaxy to process.')
    parser.add_argument('--last', default=None, type=int, help='Last galaxy to process.')
    parser.add_argument('--force', action='store_true', help='Use with --coadds; ignore previous pickle files.')
    parser.add_argument('--count', action='store_true', help='Count how many objects are left to analyze and then return.')
    parser.add_argument('--nomakeplots', action='store_true', help='Do not remake the QA plots.')
    parser.add_argument('--debug', action='store_true', help='Log to STDOUT and build debugging plots.')
    parser.add_argument('--verbose', action='store_true', help='Be verbose!')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')                                
    args = parser.parse_args()

    analysisdir = legacyhalos.io.hsc_vs_decals_dir()

    # Write out the sample.
    if args.build_sample:
        sample = build_sample(clobber=args.clobber)
        sys.exit(1)

    # Figure out what's left to do.
    info = fitsio.FITS(samplefile)
    nrows = info[1].get_nrows()
    if args.first is None:
        first = 0
    else:
        first = args.first
    if args.last is None:
        last = nrows
    else:
        last = args.last
        if first == last:
            last = last + 1
    rows = np.arange(first, last)
    #sample = legacyhalos.io.read_hsc_vs_decals(verbose=args.verbose)
    sample = Table(info[1].read(rows=rows))
    print('Read galaxy indices {} through {} (N={}) from {}'.format(
        first, last-1, len(sample), samplefile))
    
    groups, suffix = [], ''
    if args.coadds:
        suffix = 'coadds'
        groups = missing_files(sample, filedir=mangadir, filetype=suffix, clobber=args.clobber)
    elif args.custom_coadds:
        suffix = 'custom_coadds'
        groups = missing_files(sample, filedir=mangadir, filetype=suffix, clobber=args.clobber)
    elif args.unwise:
        suffix = 'unwise'
        groups = missing_files(sample, filedir=mangadir, filetype=suffix, clobber=args.clobber)
    elif args.galex:
        suffix = 'galex'
        groups = missing_files(sample, filedir=mangadir, filetype=suffix, clobber=args.clobber)
    elif args.ellipse:
        suffix = 'ellipse'
        groups = missing_files(sample, filedir=mangadir, filetype=suffix, clobber=args.clobber)
    elif args.html:
        suffix = 'html'
        groups = missing_files(sample, filedir=mangadir, filetype=suffix, clobber=args.clobber)
    else:
        groups = []

    if len(groups) == 0:
        ntodo = 0
    else:
        ntodo = len(np.hstack(np.atleast_1d(groups)))
        
    if ntodo == 0:
        print('{} for all {} galaxies are complete!'.format(
            suffix.upper(), len(sample)), flush=True)
        return
    else:
        print('{} left to do: {} / {} divided across {} group(s).'.format(
            suffix.upper(), ntodo, len(sample), len(groups)), flush=True)

    print('Starting {} {} at {}'.format(ntodo, suffix.upper(), time.asctime()), flush=True)

    # Generate the pipeline or custom optical coadds.
    if args.coadds or args.custom_coadds:
        from LSLGA.coadds import pipeline_coadds, custom_coadds
        survey = LegacySurveyData()

        for ii in groups:
            t0 = time.time()

            onegal = sample[ii]
            galaxy = onegal['PLATEIFU']
            if type(galaxy) is np.bytes_:
                galaxy = galaxy.decode('utf-8')
            radius = np.round(RADIUSFACTOR * onegal['NSA_PETRO_TH50']) # [arcsec]

            survey.survey_dir = get_survey_dir(onegal)
            survey.output_dir = os.path.join(mangadir, galaxy)

            if args.coadds:
                err = pipeline_coadds(onegal, galaxy=galaxy, radius=radius, survey=survey,
                                      pixscale=args.pixscale, nproc=args.nproc, force=args.force)
            if args.custom_coadds:
                ccdsfile = os.path.join(survey.output_dir, '{}-ccds.fits'.format(galaxy))
                if os.path.isfile(ccdsfile):
                    survey.ccds = survey.cleanup_ccds_table( fits_table(ccdsfile) )
                    err = custom_coadds(onegal, galaxy=galaxy, radius=radius, survey=survey,
                                        pixscale=args.pixscale, nproc=args.nproc, verbose=args.verbose)
                else:
                    print('CCDs file {} not found.'.format(ccdsfile))
                    err = 0

            if err == 0:
                print('ERROR: {}; please check the logfile.'.format(galaxy), flush=True)
            print('Finished galaxy {} in {:.3f} minutes.'.format(
                galaxy, (time.time() - t0) / 60), flush=True)

    if args.unwise or args.galex:
        from LSLGA.unwise import unwise_coadds, galex_coadds

        for ii in groups:
            t0 = time.time()

            onegal = sample[ii]
            galaxy = onegal['PLATEIFU']
            if type(galaxy) is np.bytes_:
                galaxy = galaxy.decode('utf-8')
            radius = np.round(RADIUSFACTOR * onegal['NSA_PETRO_TH50']) # [arcsec]

            output_dir = os.path.join(mangadir, galaxy)

            if args.unwise:
                err = unwise_coadds(onegal, galaxy=galaxy, radius=radius, output_dir=output_dir,
                                    pixscale=args.unwise_pixscale, verbose=args.verbose)
            if args.galex:
                err = galex_coadds(onegal, galaxy=galaxy, radius=radius, output_dir=output_dir,
                                   pixscale=args.galex_pixscale, verbose=args.verbose)
                
            if err == 0:
                print('ERROR: {}; please check the logfile.'.format(galaxy), flush=True)
            print('Finished galaxy {} in {:.3f} minutes.'.format(
                galaxy, (time.time() - t0) / 60), flush=True)

    if args.ellipse:
        from legacyhalos.ellipse import legacyhalos_ellipse

        for ii in groups:
            t0 = time.time()

            onegal = sample[ii]
            galaxy = onegal['PLATEIFU']
            if type(galaxy) is np.bytes_:
                galaxy = galaxy.decode('utf-8')
            galaxydir = os.path.join(mangadir, galaxy)

            err = legacyhalos_ellipse(onegal, galaxydir=galaxydir, pixscale=args.pixscale, 
                                      verbose=args.verbose)
            if err == 0:
                print('ERROR: {}; please check the logfile.'.format(galaxy), flush=True)
            print('Finished galaxy {} in {:.3f} minutes.'.format(
                galaxy, (time.time() - t0) / 60), flush=True)

    if args.html:
        from LSLGA.html import make_html

        survey = LegacySurveyData()

        htmldir = os.path.join(analysisdir, 'html')
        make_html(sample, analysisdir=analysisdir, htmldir=htmldir, clobber=args.clobber,
                  verbose=args.verbose, pixscale=args.pixscale, nproc=args.nproc,
                  survey=survey, makeplots=not args.nomakeplots)
        print('HTML pages written to {}'.format(htmldir))

        if 'NERSC_HOST' in os.environ:
            print('Execute the following command to publish the webpage.')
            print('rsync -auvP --delete {}/* /project/projectdirs/cosmo/www/temp/ioannis/hsc-vs-decals/'.format(
                htmldir))

if __name__ == '__main__':
    main()

