#!/usr/bin/env python

from __future__ import absolute_import, division, print_function

import os, time, warnings
import numpy as np
import numpy.ma as ma
import pandas as pd

from astropy.table import Table, Column

def read_leda(txtfile, zcut=False, nrows=None, nside=64):
    """Read and parse the raw HyperLeda catalog.

    Read 2118186 objects from /Users/ioannis/research/projects/LSLGA/sample/hyperleda-d25min10.txt in 0.171 min.
    Total time to convert to an astropy Table = 0.174 min
    Writing /Users/ioannis/research/projects/LSLGA/sample/hyperleda-d25min10.fits

    real    1m4.687s
    user    1m20.565s
    sys     0m9.538s

    """
    names = ('pgc', 'objname', 'objtype', 'ra', 'dec', 'type', 'bar', 'ring', 
             'multiple', 'compactness', 't', 'logd25', 'logr25', 
             'pa', 'bt', 'it', 'kt', 'v', 'modbest')
    dtype = {'pgc': np.int64, 'objname': str, 'objtype': str, 'ra': np.float64, 'dec': np.float64,
             'type': str, 'bar': str, 'ring': str, 'multiple': str, 'compactness': str,
             't': str, 'logd25': str, 'logr25': str, 'pa': str,
             'bt': str, 'it': str, 'kt': str, 'v': str, 'modbest': str}

    t0 = time.time()
    data = pd.read_csv(txtfile, delimiter='|', comment='#', na_values='--',
                       names=names, nrows=nrows, dtype=dtype)
    print('Read {} objects from {} in {:.3f} min.'.format(len(data), txtfile,
                                                          (time.time() - t0) / 60 ) )
    data = data.replace(r'^\s*$', np.nan, regex=True)  # replace blank entries with NaN

    if zcut:
        data = data.loc[data['v'].notnull()]

    out = pd.DataFrame()
    out['galaxy'] = data['objname'].str.strip()
    out['pgc'] = data['pgc']
    out['objtype'] = data['objtype'].astype(str).str.strip()
    out['ra'] = (data['ra'] * 15).astype('f8')
    out['dec'] = data['dec']
    out['type'] = data['type'].astype(str).str.strip()
    out['bar'] = data['bar'].astype(str).str.strip()
    out['ring'] = data['ring'].astype(str).str.strip()
    out['multiple'] = data['multiple'].astype(str).str.strip()
    out['compactness'] = data['compactness'].astype(str).str.strip()
    out['t'] = data['t'].astype('f4')
    out['d25'] = (0.1 * 10**data['logd25'].astype('f4')).astype('f4') # [arcmin]
    out['r25'] = (0.1 * 10**data['logr25'].astype('f4')).astype('f4') # [arcmin]
    out['pa'] = data['pa'].astype('f4')
    out['bt'] = data['bt'].astype('f4')
    out['it'] = data['it'].astype('f4')
    out['kt'] = data['kt'].astype('f4')
    out['modbest'] = data['modbest'].astype('f4')

    # Convert to an astropy Table
    t0 = time.time()
    out = Table.from_pandas(out)
    ngal = len(out)
    print('Total time to convert to an astropy Table = {:.3f} min'.format( (time.time() - t0) / 60 ))

    # Add a couple more columns
    out.add_column(Column(name='z', dtype='f4', length=ngal))
    out['z'] = data['v'].astype('f4') / 299792.458

    # Merge all the various magnitudes into a single magnitude.  Here's a little
    # snippet of code for getting the mean Bt-K and Bt-I magnitudes:
    #   ww = np.isfinite(tt['bt']) * np.isfinite(tt['kt'])
    #   bk = ma.getdata(tt['bt'][ww] - tt['kt'][ww])

    median_bk = 4.21
    median_bi = 1.52
    
    out.add_column(Column(name='mag', dtype='f4', length=ngal))
    out['mag'] = out['bt']
    
    need = np.isnan(out['mag']) * np.isfinite(out['kt'])
    if np.sum(need) > 0:
        out['mag'][need] = out['kt'] + median_bk
    
    need = np.isnan(out['mag']) * np.isfinite(out['it'])
    if np.sum(need) > 0:
        out['mag'][need] = out['it'] + median_bi

    # To get the mean surface brightness (in mag/arcsec2) within D25 do (where
    # D25 is in arcmin):
    #    mu = m + 2.5 * np.log10( np.pi * (60/2)**2 ) + 5 * np.log10(D25)

    return data, out

if __name__ == '__main__':
    
    NLSGAdir = os.getenv('LSLGA_DIR')
    txtfile = os.path.join(NLSGAdir, 'sample', 'hyperleda-d25min10.txt')
    
    data, out = read_leda(txtfile, zcut=False, nrows=None) # 1000)

    fitsfile = txtfile.replace('.txt', '.fits')
    #fitsfile = os.path.join(NLSGAdir, 'sample', 'large-galaxies-parent.fits')
    print('Writing {}'.format(fitsfile))
    out.write(fitsfile, overwrite=True)


