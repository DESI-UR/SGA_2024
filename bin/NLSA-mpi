#!/usr/bin/env python
"""MPI wrapper for the NLSA

"""
import matplotlib
matplotlib.use('Agg')

import os, sys, time, pdb
import argparse
import numpy as np
import fitsio

from astropy.table import Table, hstack
from contextlib import redirect_stdout, redirect_stderr

from astrometry.util.fits import fits_table
from legacypipe.survey import LegacySurveyData

import LSLGA.NLSA
import LSLGA.coadds
import LSLGA.galex
import LSLGA.unwise

def missing_files(sample, filetype='coadds', size=1, htmldir=None,
                  clobber=False):
    """Find missing data of a given filetype."""    

    if filetype == 'coadds':
        filesuffix = '-pipeline-resid-grz.jpg'
    elif filetype == 'unwise':
        filesuffix = '-resid-W1W2.jpg'
    elif filetype == 'galex':
        filesuffix = '-resid-FUVNUV.jpg'
    elif filetype == 'custom_coadds':
        filesuffix = '-custom-resid-grz.jpg'
    elif filetype == 'ellipse':
        filesuffix = '-ellipsefit.p'
    elif filetype == 'html':
        filesuffix = '-ccdpos.png'
        #filesuffix = '-sersic-exponential-nowavepower.png'
    else:
        print('Unrecognized file type!')
        raise ValueError

    ngal = len(sample)
    indices = np.arange(ngal)
    todo = np.ones(ngal, dtype=bool)

    if filetype == 'html':
        galaxy, _, galaxydir = LSLGA.NLSA.get_galaxy_galaxydir(sample, htmldir=htmldir, html=True)
    else:
        galaxy, galaxydir = LSLGA.NLSA.get_galaxy_galaxydir(sample, htmldir=htmldir)

    for ii, (gal, gdir) in enumerate( zip(np.atleast_1d(galaxy), np.atleast_1d(galaxydir)) ):
        checkfile = os.path.join(gdir, '{}{}'.format(gal, filesuffix))
        if os.path.exists(checkfile) and clobber is False:
            todo[ii] = False

    if np.sum(todo) == 0:
        return list()
    else:
        indices = indices[todo]
        
    return np.array_split(indices, size)

def _missing_files(args, sample, size, htmldir=None, sampledir=''):
    """Simple task-specific wrapper on missing_files.

    """
    if args.coadds:
        suffix = 'coadds'
    elif args.custom_coadds:
        suffix = 'custom_coadds'
    elif args.unwise:
        suffix = 'unwise'
    elif args.galex:
        suffix = 'galex'
    elif args.ellipse:
        suffix = 'ellipse'
    elif args.htmlplots:
        suffix = 'html'
    else:
        suffix = ''        

    if suffix != '':
        groups = missing_files(sample, filetype=suffix, size=size, 
                               clobber=args.clobber, htmldir=htmldir)
    else:
        groups = []        

    return suffix, groups

def _start(galaxy, log=None, seed=None):
    if seed:
        print('Random seed = {}'.format(seed), flush=True)        
    print('Started working on galaxy {} at {}'.format(
        galaxy, time.asctime()), flush=True, file=log)

def _done(galaxy, err, t0, log=None):
    if err == 0:
        print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True, file=log)
    print('Finished galaxy {} in {:.3f} minutes.'.format(
          galaxy, (time.time() - t0)/60), flush=True, file=log)

def _call_pipeline_coadds(onegal, galaxy, radius_mosaic, survey, pixscale,
                          nproc, force, debug, logfile):
    """Wrapper script to build the pipeline coadds.

    """
    cleanup = True
    
    t0 = time.time()
    if debug:
        _start(galaxy)
        err = LSLGA.coadds.pipeline_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                           survey=survey, pixscale=pixscale,
                                           nproc=nproc, force=force, cleanup=cleanup)
        _done(galaxy, err, t0)
    else:
        with open(logfile, 'a') as log:
            with redirect_stdout(log), redirect_stderr(log):
                _start(galaxy, log=log)
                err = LSLGA.coadds.pipeline_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                                   survey=survey, pixscale=pixscale,
                                                   nproc=nproc, force=force, log=log, cleanup=cleanup)
                _done(galaxy, err, t0, log=log)

def _call_custom_coadds(onegal, galaxy, radius_mosaic, survey, pixscale,
                        nproc, debug, logfile):
    """Wrapper script to build the pipeline coadds."""
    t0 = time.time()
    if debug:
        _start(galaxy)
        err = LSLGA.coadds.custom_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                         survey=survey, pixscale=pixscale, nproc=nproc)
        _done(galaxy, err, t0)
    else:
        with open(logfile, 'a') as log:
            with redirect_stdout(log), redirect_stderr(log):
                _start(galaxy, log=log)
                err = LSLGA.coadds.custom_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                                 survey=survey, pixscale=pixscale,
                                                 nproc=nproc, log=log)
                _done(galaxy, err, t0, log=log)
                
def _call_galex_unwise(onegal, galaxy, galaxydir, radius_mosaic, unwise_pixscale, 
                       galex_pixscale, pixscale, debug, verbose, dounwise, dogalex,
                       logfile):
    """Wrapper script to build the unWISE/GALEX coadds."""
    t0 = time.time()
    if dogalex:
        if debug:
            _start(galaxy)
            err = LSLGA.galex.galex_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                           output_dir=galaxydir, pixscale=galex_pixscale,
                                           ref_pixscale=pixscale, verbose=verbose)
            _done(galaxy, err, t0)
        else:
            with open(logfile, 'a') as log:
                with redirect_stdout(log), redirect_stderr(log):
                    _start(galaxy, log=log)
                    err = LSLGA.galex.galex_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                                   output_dir=galaxydir, pixscale=galex_pixscale,
                                                   ref_pixscale=pixscale, verbose=verbose)
                    _done(galaxy, err, t0, log=log)

    if dounwise:
        if debug:
            _start(galaxy)
            err = LSLGA.unwise.unwise_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                             output_dir=galaxydir, pixscale=unwise_pixscale,
                                             ref_pixscale=pixscale, verbose=verbose)
            _done(galaxy, err, t0)
        else:
            with open(logfile, 'a') as log:
                with redirect_stdout(log), redirect_stderr(log):
                    _start(galaxy, log=log)
                    err = LSLGA.unwise.unwise_coadds(onegal, galaxy=galaxy, radius_mosaic=radius_mosaic,
                                                     output_dir=galaxydir, pixscale=unwise_pixscale,
                                                     ref_pixscale=pixscale, verbose=verbose)
                    _done(galaxy, err, t0, log=log)
                    
def _call_ellipse(onegal, galaxy, pixscale, nproc, verbose, debug, logfile):
    """Wrapper script to do ellipse-fitting.

    """
    import LSLGA.ellipse
    zcolumn = 'Z_LAMBDA'
    
    t0 = time.time()
    if debug:
        _start(galaxy)
        err = LSLGA.ellipse.LSLGA_ellipse(onegal, pixscale=pixscale, nproc=nproc,
                                                      zcolumn=zcolumn,
                                                      verbose=verbose, debug=debug,
                                                      noellipsefit=True)
        _done(galaxy, err, t0)
    else:
        with open(logfile, 'a') as log:
            with redirect_stdout(log), redirect_stderr(log):
                _start(galaxy, log=log)
                err = LSLGA.ellipse.LSLGA_ellipse(onegal, pixscale=pixscale, nproc=nproc,
                                                              zcolumn=zcolumn,
                                                              verbose=verbose, debug=debug,
                                                              noellipsefit=True)
                _done(galaxy, err, t0, log=log)

def _call_htmlplots(onegal, galaxy, survey, pixscale, nproc, debug, clobber,
                    verbose, ccdqa, logfile, htmldir):
    """Wrapper script to build the pipeline coadds."""
    t0 = time.time()

    if debug:
        _start(galaxy)
        err = LSLGA.html.make_plots(onegal, datadir=None, htmldir=htmldir,
                                          pixscale=pixscale, survey=survey, clobber=clobber,
                                          verbose=verbose, nproc=nproc,
                                          ccdqa=ccdqa, maketrends=False)
        _done(galaxy, err, t0)
    else:
        with open(logfile, 'a') as log:
            with redirect_stdout(log), redirect_stderr(log):
                _start(galaxy, log=log)
                err = LSLGA.html.make_plots(onegal, datadir=None, htmldir=htmldir,
                                                  pixscale=pixscale, survey=survey, clobber=clobber,
                                                  verbose=verbose, nproc=nproc,
                                                  ccdqa=ccdqa, maketrends=False)
                _done(galaxy, err, t0, log=log)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--nproc', default=1, type=int, help='number of multiprocessing processes per MPI rank.')
    parser.add_argument('--pixscale', default=0.262, type=float, help='pixel scale (arcsec/pix).')
    parser.add_argument('--unwise-pixscale', default=2.75, type=float, help='unWISE pixel scale (arcsec/pix).')
    parser.add_argument('--galex-pixscale', default=1.5, type=float, help='unWISE pixel scale (arcsec/pix).')
    parser.add_argument('--mpi', action='store_true', help='Use MPI parallelism')

    parser.add_argument('--first', type=int, help='Index of first object to process.')
    parser.add_argument('--last', type=int, help='Index of last object to process.')

    parser.add_argument('--coadds', action='store_true', help='Build the pipeline coadds.')
    parser.add_argument('--custom-coadds', action='store_true', help='Build the custom coadds.')
    parser.add_argument('--unwise', action='store_true', help='Build the unWISE coadds.')
    parser.add_argument('--galex', action='store_true', help='Build the GALEX coadds.')
    parser.add_argument('--ellipse', action='store_true', help='Do the ellipse fitting.')
    parser.add_argument('--integrate', action='store_true', help='Integrate the surface brightness profiles.')
    parser.add_argument('--htmlplots', action='store_true', help='Build the HTML output.')
    parser.add_argument('--htmlindex', action='store_true', help='Build HTML index.html page.')
    parser.add_argument('--proposal', action='store_true', help='Make some coadds for the proposal.')

    parser.add_argument('--htmldir', type=str, help='Output directory for HTML files.')
    
    parser.add_argument('--ccdqa', action='store_true', help='Build the CCD-level diagnostics.')
    parser.add_argument('--force', action='store_true', help='Use with --coadds; ignore previous pickle files.')
    parser.add_argument('--count', action='store_true', help='Count how many objects are left to analyze and then return.')
    parser.add_argument('--nomakeplots', action='store_true', help='Do not remake the QA plots for the HTML pages.')

    parser.add_argument('--debug', action='store_true', help='Log to STDOUT and build debugging plots.')
    parser.add_argument('--verbose', action='store_true', help='Enable verbose output.')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')                                
    args = parser.parse_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    # Read and broadcast the sample.
    sampledir = os.path.join(os.getenv('LSLGA_DIR'), 'NLSA')
    if rank == 0:
        print('Hack for the NASA/ADAP 2019 proposal.')
        sample = LSLGA.NLSA.read_nlsa_parent(verbose=args.verbose, first=args.first,
                                             last=args.last, proposal=args.proposal)
    else:
        sample = None

    if comm:
        sample = comm.bcast(sample, root=0)

    # Build the web-page; integrate the ellipse-fitting results.
    if args.htmlindex:
        if rank == 0:
            LSLGA.html.make_html(sample, survey=None, pixscale=args.pixscale, zcolumn='Z_LAMBDA',
                                 nproc=args.nproc, clobber=args.clobber, makeplots=False,
                                 verbose=args.verbose, htmldir=args.htmldir)
        return

    # Determine how many more objects we need to analyze and divide them
    # across ranks.
    groups, suffix = [], ''
    if rank == 0:
        suffix, groups = _missing_files(args, sample, size, args.htmldir)

    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if len(groups) == 0:
        ntodo = 0
    else:
        ntodo = len(np.hstack(np.atleast_1d(groups)))
        
    if rank == 0:
        if ntodo == 0:
            print('{} for all {} galaxies are complete!'.format(
                suffix.upper(), len(sample)), flush=True)
            return
        else:
            print('{} left to do: {} / {} divided across {} group(s) and {} rank(s).'.format(
                suffix.upper(), ntodo, len(sample), len(groups), size), flush=True)

    if len(groups[rank]) == 0 or args.count:
        if len(groups[rank]) > 0 and args.debug:
            galaxy, galaxydir = LSLGA.NLSA.get_galaxy_galaxydir(sample[groups], htmldir=args.htmldir)
            for ii, dd in zip(groups[rank], galaxydir):
                print('  {} {}'.format(ii, dd))
        return

    # Loop on the remaining objects.
    print('Starting {} {} on rank {} at {}'.format(len(groups[rank]), suffix.upper(),
                                                   rank, time.asctime()), flush=True)
    tall = time.time()
    for count, ii in enumerate(groups[rank]):
        onegal = sample[ii]

        galaxy, galaxydir = LSLGA.NLSA.get_galaxy_galaxydir(onegal, htmldir=args.htmldir)
        if not os.path.isdir(galaxydir):
            os.makedirs(galaxydir, exist_ok=True)

        #if (count+1) % 10 == 0:
        print('Rank {:03d} ({} / {}): {} (index {})'.format(
            rank, count+1, len(groups[rank]), galaxydir, ii), flush=True)

        if args.debug:
            logfile = None
        else:
            logfile = os.path.join(galaxydir, '{}-{}.log'.format(galaxy, suffix))
            #print('Logging to {} '.format(logfile), flush=True)
        
        # Need the cluster "radius" to build the coadds.
        if args.coadds or args.custom_coadds or args.galex or args.unwise or args.htmlplots:
            radius_mosaic_arcsec = onegal['REFF'] * 10

            survey = LegacySurveyData()
            survey.output_dir = galaxydir

        if args.coadds:
            _call_pipeline_coadds(onegal, galaxy, radius_mosaic_arcsec, survey, args.pixscale,
                                  args.nproc, args.force, args.debug, logfile)
                    
        if args.custom_coadds or args.htmlplots:
            ccdsfile = os.path.join(survey.output_dir, '{}-ccds.fits'.format(galaxy))
            if not os.path.isfile(ccdsfile):
                if args.debug:
                    print('CCDs file {} not found.'.format(ccdsfile), flush=True)
                    print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)
                else:
                    with open(logfile, 'w') as log:
                        print('CCDs file {} not found.'.format(ccdsfile), flush=True, file=log)
                        print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True, file=log)
                continue
            survey.ccds = survey.cleanup_ccds_table(fits_table(ccdsfile))

            # Check that coadds in all three grz bandpasses were generated in the
            # previous step.
            if ('g' not in survey.ccds.filter) or ('r' not in survey.ccds.filter) or ('z' not in survey.ccds.filter):
                if args.debug:
                    print('Missing grz coadds...skipping.', flush=True)
                    print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True)
                else:
                    with open(logfile, 'w') as log:
                        print('Missing grz coadds...skipping.', flush=True, file=log)
                        print('ERROR: galaxy {}; please check the logfile.'.format(galaxy), flush=True, file=log)
                continue

        if args.custom_coadds:
            _call_custom_coadds(onegal, galaxy, radius_mosaic_arcsec, survey,
                                args.pixscale, args.nproc, args.debug, logfile)
                    
        if args.unwise or args.galex:
            _call_galex_unwise(onegal, galaxy, galaxydir, radius_mosaic_arcsec, 
                               args.unwise_pixscale, args.galex_pixscale, args.pixscale,
                               args.debug, args.verbose, args.unwise, args.galex, logfile)

        if args.ellipse:
            _call_ellipse(onegal, galaxy, args.pixscale, args.nproc, args.verbose,
                          args.debug, logfile)
                        
        if args.htmlplots:
            _call_htmlplots(Table(onegal), galaxy, survey, args.pixscale, args.nproc,
                            args.debug, args.clobber, args.verbose, args.ccdqa, logfile,
                            args.htmldir)

    if rank == 0:
        print('Finished {} {} at {} after {:.3f} minutes'.format(
            ntodo, suffix.upper(), time.asctime(), (time.time() - tall) / 60 ), flush=True)
        groups = missing_files(sample, filetype=suffix, size=size, clobber=args.clobber)
        if len(groups) > 0:
            stilltodo = len(np.hstack(np.atleast_1d(groups)))
        else:
            stilltodo = 0
        print('{} left to do: {} / {}.'.format(suffix.upper(), stilltodo, ntodo), flush=True)

if __name__ == '__main__':
    main()
