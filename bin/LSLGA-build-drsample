#!/usr/bin/env python

"""Generate the sample of large galaxies in DR6+DR7.

% LSLGA-build-drsample --clobber --verbose
Read 1376864 objects from /Users/ioannis/research/projects/LSLGA/sample/hyperleda-d25min10-18may13.fits
Read 1376864 objects from /Users/ioannis/research/projects/LSLGA/sample/hyperleda-d25min10-18may13-allwise.fits
  Removed 13116/1363748 (0.96%) objects with no magnitude estimate.
Read 20070 DESI tiles from /Users/ioannis/research/projects/LSLGA/sample/desi-tiles.fits
  Identified 866889 (496859) objects inside (outside) the DESI footprint.
  Removed 0/1363748 (0.00%) objects with D(25) < 0.167 and D(25) > 10000.000 arcmin.
Read 1092055 Tycho-2 stars with B<12.0.
  Found 23360/1363748 (1.71%) galaxies near a Tycho-2 star.
Writing 1363748 objects to /Users/ioannis/research/projects/LSLGA/sample/LSLGA-v1.0.fits
Writing /Users/ioannis/research/projects/LSLGA/sample/LSLGA-v1.0.kd.fits

"""
import os, sys, argparse, time
import numpy as np

import LSLGA.io
import LSLGA.misc
from legacypipe.survey import LegacySurveyData

import multiprocessing
maxnproc = multiprocessing.cpu_count() // 2

def get_masked_pixels(ccds, survey, wcs, debug=False):
    """Given an (input) set of CCDS (restricted, one supposes, to a large-galaxy
    cutout), compute the fraction of interpolated and saturated pixels.

    """
    nccd = len(ccds)
    W, H = wcs.get_width(), wcs.get_height()
    radecpoly = np.array([wcs.pixelxy2radec(x,y) for 
                          x, y in [(1, 1), (W, 1), (W, H), (1, H), (1, 1)]])
    for ii, ccd in enumerate(ccds):
        im = survey.get_image_object(ccd)
        x0, x1, y0, y1, slc = im.get_image_extent(wcs=im.get_wcs(), radecpoly=radecpoly)
        dq = im.read_dq(slice=slc)

        ccds.galaxy_npix[ii] = dq.size
        ccds.galaxy_fracsatur[ii] = np.sum(dq == 4) / dq.size  # saturated
        ccds.galaxy_fracinterp[ii] = np.sum(dq == 8) / dq.size # interpolated
        if debug:
            print(ii, ccd.filter, 100 * ccds.galaxy_fracsatur[ii], 100 * ccds.galaxy_fracinterp[ii])
            plt.imshow( (dq & 8 != 0), origin='lower')
            plt.show()
            
    return ccds

def simple_wcs(onegal, diam, PIXSCALE=0.262):
    """Build a simple WCS object for a single galaxy.

    """
    from astrometry.util.util import Tan
    size = np.rint(diam * 60 / PIXSCALE).astype('int') # [pixels]
    wcs = Tan(onegal['RA'], onegal['DEC'], size/2+0.5, size/2+0.5,
                 -PIXSCALE/3600.0, 0.0, 0.0, PIXSCALE/3600.0, 
                 float(size), float(size))
    
    return wcs

def _build_drsample_one(args):
    """Wrapper function for the multiprocessing."""
    return build_drsample_one(*args)

def build_drsample_one(onegal, survey_dr6, survey_dr7, dr6_dec, dr7_dec, verbose=False):
    """Wrapper function to find overlapping grz CCDs for a single galaxy.
    
    """
    idr6 = (onegal['DEC'] >= dr6_dec[0]) * (onegal['DEC'] <= dr6_dec[1])
    idr7 = (onegal['DEC'] >= dr7_dec[0]) * (onegal['DEC'] <= dr7_dec[1])

    if idr6 or idr7:
        diam = 1.0 * onegal['D25'] # [arcmin]
        wcs = simple_wcs(onegal, diam)

    # Choose DR7 over DR6
    ccds = None
    if idr7:
        dr = 'dr7'
        survey = survey_dr7
        ccds = survey_dr7.ccds_touching_wcs(wcs, ccdrad=None)
        
    if idr6 and not idr7:
        dr = 'dr6'
        survey = survey_dr6
        ccds = survey_dr6.ccds_touching_wcs(wcs, ccdrad=None)

    if ccds is None or (not idr6 and not idr7):
        return [None, None]

    if 'g' in ccds.filter and 'r' in ccds.filter and 'z' in ccds.filter:
        nccd = len(ccds)

        ccds.galaxy_npix = np.zeros(nccd).astype('int') # number of pixels in cutout
        ccds.galaxy_fracsatur = np.zeros(nccd).astype('f4')
        ccds.galaxy_fracinterp = np.zeros(nccd).astype('f4')
        ccds.lslga_id = np.zeros(nccd).astype('i8') + onegal['LSLGA_ID']

        onegal['DR'] = dr.upper()

        if diam >= 1.0:
            ccds = get_masked_pixels(ccds, survey, wcs)

        if verbose:
            print('{}: {} CCDs, RA = {:.5f}, Dec = {:.5f}, Diameter={:.4f} arcmin'.format(
                    onegal['GALAXY'], len(ccds), onegal['RA'], onegal['DEC'], diam))
            sys.stdout.flush()
        return [onegal, ccds]
    else:
        return [None, None]

def build_drsample(cat, nproc=1, verbose=False):
    """Build the full sample of galaxies with grz coverage in DR6+DR7.
    
    """
    from astropy.table import vstack, Column
    from astrometry.util.fits import merge_tables
    
    cat.add_column(Column(name='DR', length=len(cat), dtype='S3'))

    sampledir = LSLGA.io.sample_dir()
    survey_dr6 = LegacySurveyData(survey_dir=sampledir, verbose=False)
    survey_dr7 = LegacySurveyData(survey_dir=sampledir, verbose=False)

    # Read the CCDs files here to get the declination boundaries of each DR.
    dr6_ccds = survey_dr6.get_ccds()
    dr7_ccds = survey_dr7.get_ccds()
    dr6_dec = (dr6_ccds.dec.min(), dr6_ccds.dec.max())
    dr7_dec = (dr7_ccds.dec.min(), dr7_ccds.dec.max())
    
    sampleargs = list()
    for gg in cat:
        sampleargs.append( (gg, survey_dr6, survey_dr7, dr6_dec, dr7_dec, verbose) )

    if nproc > 1:
        p = multiprocessing.Pool(nproc)
        result = p.map(_build_drsample_one, sampleargs)
        p.close()
    else:
        result = list()
        for args in sampleargs:
            result.append(_build_drsample_one(args))
    
    # Remove non-matching objects and write out the sample
    rr = list(zip(*result))    
    outcat = vstack(list(filter(None, rr[0])))
    outccds = merge_tables( list(filter(None, rr[1])), columns='minimal')
    
    return outcat, outccds

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--dr', type=str, default='dr6-dr7', help='Data release.')
    parser.add_argument('--nproc', type=int, default=1, help='Number of processors to use.')
    parser.add_argument('--d25min', type=float, default=None, help='Minimum diameter [arcmin].')
    parser.add_argument('--d25max', type=float, default=None, help='Maximum diameter [arcmin].')
    parser.add_argument('--verbose', action='store_true', help='Be verbose!')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')
    args = parser.parse_args()

    drsamplefile = LSLGA.io.get_parentfile(dr=args.dr, d25min=args.d25min, d25max=args.d25max)
    drccdsfile = LSLGA.io.get_parentfile(dr=args.dr, ccds=True, d25min=args.d25min, d25max=args.d25max)
    if os.path.isfile(drsamplefile) and not args.clobber:
        print('Output file {} exists; use clobber.'.format(drsamplefile))
        sys.exit(1)
        
    parent = LSLGA.io.read_parent(verbose=args.verbose)
    if args.d25min is not None:
        parent = parent[parent['D25'] >= args.d25min]
        if args.verbose:
            print('Cutting sample to {} galaxies with D(25) >= {:.2f} arcmin'.format(
                len(parent), args.d25min))
    if args.d25max is not None:
        parent = parent[parent['D25'] <= args.d25max]
        if args.verbose:
            print('Cutting sample to {} galaxies with D(25) <= {:.2f} arcmin'.format(
                len(parent), args.d25max))

    #rand = np.random.RandomState(seed=1)
    #parent = parent[rand.choice(len(parent), size=10000)]

    if args.nproc > maxnproc:
        print('Number of requested cores {} exceeds the maximum available {}.'.format(
            args.nproc, maxnproc))
        sys.exit(1)

    t0 = time.time()
    drsample, drccds = build_drsample(parent, nproc=args.nproc, verbose=args.verbose)
    if args.verbose:
        print('Found {}/{} galaxies in the DR6+DR7 footprint.'.format(len(drsample), len(parent)))
        print('Total time = {:.3f} minutes.'.format( (time.time() - t0) / 60 ) )

    if args.verbose:
        print('Writing {} galaxies to {}'.format(len(drsample), drsamplefile))
    drsample.write(drsamplefile, overwrite=True)

    if args.verbose:
        print('Writing {} CCDs to {}'.format(len(drccds), drccdsfile))
    drccds.writeto(drccdsfile, overwrite=True)

if __name__ == '__main__':
    main()

