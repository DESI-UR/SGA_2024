#!/usr/bin/env python

"""Generate the sample of large galaxies in DR6+DR7.

% LSLGA-build-drsample --clobber --nproc 4



"""
import os, sys, argparse
from time import time
import numpy as np

from astropy.table import vstack, Column

import LSLGA.io
import LSLGA.misc
from legacypipe.survey import LegacySurveyData

import multiprocessing
maxnproc = multiprocessing.cpu_count() // 2

def get_masked_pixels(ccds, survey, wcs, debug=False):
    """Given an (input) set of CCDS (restricted, one supposes, to a large-galaxy
    cutout), compute the fraction of interpolated and saturated pixels.

    """
    nccd = len(ccds)
    W, H = wcs.get_width(), wcs.get_height()
    radecpoly = np.array([wcs.pixelxy2radec(x,y) for 
                          x, y in [(1, 1), (W, 1), (W, H), (1, H), (1, 1)]])
    for ii, ccd in enumerate(ccds):
        im = survey.get_image_object(ccd)
        x0, x1, y0, y1, slc = im.get_image_extent(wcs=im.get_wcs(), radecpoly=radecpoly)
        dq = im.read_dq(slice=slc)

        ccds.galaxy_npix[ii] = dq.size
        ccds.galaxy_fracsatur[ii] = np.sum(dq == 4) / dq.size  # saturated
        ccds.galaxy_fracinterp[ii] = np.sum(dq == 8) / dq.size # interpolated
        if debug:
            print(ii, ccd.filter, 100 * ccds.galaxy_fracsatur[ii], 100 * ccds.galaxy_fracinterp[ii])
            plt.imshow( (dq & 8 != 0), origin='lower')
            plt.show()
            
    return ccds

def simple_wcs(onegal, diam, PIXSCALE=0.262):
    """Build a simple WCS object for a single galaxy.

    """
    from astrometry.util.util import Tan
    size = np.rint(diam * 60 / PIXSCALE).astype('int') # [pixels]
    wcs = Tan(onegal['RA'], onegal['DEC'], size/2+0.5, size/2+0.5,
                 -PIXSCALE/3600.0, 0.0, 0.0, PIXSCALE/3600.0, 
                 float(size), float(size))
    
    return wcs

def _build_drsample_one(args):
    """Wrapper function for the multiprocessing."""
    return build_drsample_one(*args)

def build_drsample_one(onegal, survey, verbose=False, interp=False):
    """Wrapper function to find overlapping grz CCDs for a single galaxy.
    
    """
    if interp:
        factor = 1.0
    else:
        factor = 1.5
        
    diam = factor * onegal['D25'] # [arcmin]
    wcs = simple_wcs(onegal, diam)

    ccds = survey.ccds_touching_wcs(wcs, ccdrad=None)
    if ccds is None:
        return [None, None]

    if 'g' in ccds.filter and 'r' in ccds.filter and 'z' in ccds.filter:

        nccd = len(ccds)
        ccds.lslga_id = np.zeros(nccd).astype('i8') + onegal['LSLGA_ID'] # for easy cross-referencing
        
        # Special use case to get the fraction of interpolated pixels.
        if interp:
            ccds.galaxy_npix = np.zeros(nccd).astype('int') # number of pixels in cutout
            ccds.galaxy_fracsatur = np.zeros(nccd).astype('f4')
            ccds.galaxy_fracinterp = np.zeros(nccd).astype('f4')
            ccds = get_masked_pixels(ccds, survey, wcs)

        if verbose:
            print('{:30s}: {:04d} CCDs, RA = {:.5f}, Dec = {:.5f}, Diameter={:.4f} arcmin'.format(
                    onegal['GALAXY'], len(ccds), onegal['RA'], onegal['DEC'], diam))
            #sys.stdout.flush()
        return [onegal, ccds]
    else:
        return [None, None]

def build_drsample(cat, dr, nproc=1, nside=128, verbose=False,
                   use_wcs=True, interp=False):
    """Build the full sample of galaxies with grz coverage in DR6+DR7.
    
    """
    from glob import glob
    import healpy as hp
    from astrometry.util.fits import fits_table, merge_tables

    drdir = os.path.join(LSLGA.io.sample_dir(), dr)
    
    # To speed up the matching, assign the input catalog and CCDs file to
    # nside=256 healpixels (0.0525 deg^2 or 0.23 deg per side) and only keep the
    # matching objects.
    t0 = time()

    ccdsfile = glob(os.path.join(drdir, 'survey-ccds-{}*.fits'.format(dr)))[0]
    ccds = fits_table(ccdsfile)
    print('Read {} CCDs from {}'.format(len(ccds), ccdsfile))

    cat_allpix = LSLGA.misc.radec2pix(nside, cat['RA'].data, cat['DEC'].data)

    def galaxies_and_ccds(ccds):
        """Get the indices of objects in the input galaxy catalog located in a healpixel
        occupied by an input CCD.

        """
        ccdpix = np.unique( LSLGA.misc.radec2pix(nside, ccds.ra, ccds.dec) )
        # add the neighboring healpixels to protect against edge effects
        ccdpix = np.unique( np.hstack( (ccdpix, hp.pixelfunc.get_all_neighbours(nside, ccdpix, nest=True).flatten()) ) )
        if np.sum(ccdpix == -1) > 0: # remove the "no neighbors" healpixel, if it exists
            ccdpix = np.delete(ccdpix, np.where(ccdpix == -1)[0])
        catindx = np.where( np.isin(cat_allpix, ccdpix) )[0]
        return catindx

    # Only keep galaxies that have at least one band of grz coverage.
    galkeep = None
    for band in ('g', 'r', 'z'):
        indx = galaxies_and_ccds(ccds[ccds.filter == band])
        if galkeep is None:
            galkeep = indx
        else:
            galkeep = np.intersect1d(galkeep, indx)

    chipkeep = np.where( np.isin(LSLGA.misc.radec2pix(nside, ccds.ra, ccds.dec), np.unique(cat_allpix[galkeep])) )[0]

    cat_keep = cat[galkeep]
    ccds_keep = ccds[chipkeep]

    #import matplotlib.pyplot as plt
    #plt.scatter(cat['RA'], cat['DEC'], s=1)
    #plt.scatter(cat_keep['RA'], cat_keep['DEC'], s=1)
    #plt.scatter(ccds_keep.ra, ccds_keep.dec, s=1)
    #plt.show()
    #import pdb ; pdb.set_trace()    

    print('  Healpix selection  in {:.3f} sec: found {}/{} galaxies with grz coverage in {}.'.format(
        time() - t0, len(cat_keep), len(cat), dr.upper()))

    # Now (optionally) do a more refined (parallelized) search using
    # ccds_touching_wcs for each individual galaxy.
    if use_wcs or interp:
        t0 = time()
        survey = LegacySurveyData(survey_dir=drdir, verbose=False)

        sampleargs = list()
        for gg in cat_keep:
            sampleargs.append( (gg, survey, verbose, interp) )

        if nproc > 1:
            p = multiprocessing.Pool(nproc)
            result = p.map(_build_drsample_one, sampleargs)
            p.close()
        else:
            result = list()
            for args in sampleargs:
                result.append(_build_drsample_one(args))

        # Remove non-matching objects and write out the sample
        rr = list(zip(*result))    
        outcat = vstack(list(filter(None, rr[0])))
        outccds = merge_tables( list(filter(None, rr[1])), columns='fillzero')

        outcat = outcat[np.argsort(outcat['RA'])]
        outccds = outccds[np.argsort(outccds.ra)]

        # Add the DR for convenience.
        outcat.add_column(Column(name='DR', data=np.repeat(dr.upper(), len(outcat))))
        outccds.dr = np.repeat(dr.upper(), len(outccds))

        print('WCS selection in {:.3f} min: found {}/{} galaxies with grz coverage in {}.'.format(
            (time() - t0) / 60, len(outcat), len(cat), dr.upper()))

    else:
        print('Not yet implemented.')
    
    return outcat, outccds

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--dr', type=str, default='dr6-dr7', help='Data release.')
    parser.add_argument('--nproc', type=int, default=1, help='Number of processors to use.')
    parser.add_argument('--d25min', type=float, default=None, help='Minimum diameter [arcmin].')
    parser.add_argument('--d25max', type=float, default=None, help='Maximum diameter [arcmin].')
    parser.add_argument('--interp', action='store_true', help='Special use.')
    parser.add_argument('--verbose', action='store_true', help='Be verbose!')
    parser.add_argument('--clobber', action='store_true', help='Overwrite existing files.')
    args = parser.parse_args()

    parent = LSLGA.io.read_parent(verbose=args.verbose)
    if args.d25min is not None:
        parent = parent[parent['D25'] >= args.d25min]
        print('Cutting sample to {} galaxies with D(25) >= {:.2f} arcmin'.format(
            len(parent), args.d25min))
    if args.d25max is not None:
        parent = parent[parent['D25'] <= args.d25max]
        print('Cutting sample to {} galaxies with D(25) <= {:.2f} arcmin'.format(
            len(parent), args.d25max))

    #kdparent = LSLGA.io.read_parent(verbose=args.verbose, kd=True)
    #rand = np.random.RandomState(seed=1)
    #parent = parent[rand.choice(len(parent), size=10000)]

    if args.nproc > maxnproc:
        print('Number of requested cores {} exceeds the maximum available {}.'.format(
            args.nproc, maxnproc))
        sys.exit(1)

    # Build the sample for each DR (and the union, below).
    if args.dr == 'dr6-dr7':
        drlist = ('dr6', 'dr7')
    else:
        drlist = args.dr
    
    tall = time()
    for dr in np.atleast_1d(drlist):
        drsamplefile = LSLGA.io.get_parentfile(dr=dr, d25min=args.d25min, d25max=args.d25max)
        drccdsfile = LSLGA.io.get_parentfile(dr=dr, ccds=True, d25min=args.d25min, d25max=args.d25max)
        if os.path.isfile(drsamplefile) and not args.clobber:
            print('Output file {} exists; use clobber.'.format(drsamplefile))
            continue

        drsample, drccds = build_drsample(parent, dr=dr, verbose=args.verbose,
                                          nproc=args.nproc, interp=args.interp)

        print('Writing {} galaxies to {}'.format(len(drsample), drsamplefile))
        drsample.write(drsamplefile, overwrite=True)

        print('Writing {} CCDs to {}'.format(len(drccds), drccdsfile))
        drccds.writeto(drccdsfile, overwrite=True)

        print()

    # Optionally combine the individual samples, resolving duplicates in favor
    # of DR7.
    if args.dr == 'dr6-dr7':
        print('Building the joint DR6 + DR7 sample.')

        drsamplefile = LSLGA.io.get_parentfile(dr=args.dr, d25min=args.d25min, d25max=args.d25max)
        drccdsfile = LSLGA.io.get_parentfile(dr=args.dr, ccds=True, d25min=args.d25min, d25max=args.d25max)
        if os.path.isfile(drsamplefile) and not args.clobber:
            print('Output file {} exists; use clobber.'.format(drsamplefile))
            sys.exit(1)
    
        dr6 = LSLGA.io.read_parent(verbose=args.verbose, dr='dr6')
        dr6_ccds = LSLGA.io.read_parent(verbose=args.verbose, dr='dr6', ccds=True)

        dr7 = LSLGA.io.read_parent(verbose=args.verbose, dr='dr7')
        dr7_ccds = LSLGA.io.read_parent(verbose=args.verbose, dr='dr7', ccds=True)

        dr67 = vstack( (dr6, dr7) )
        dup = np.ones(len(dr67), dtype=bool)
        dup[np.unique(dr67['LSLGA_ID'], return_index=True)[1]] = False

        keep = np.where(~dup)[0]
        if np.sum(dup) > 0:
            print('  Resolving {} duplicates among {} galaxies in favor of DR7.'.format(
                np.sum(dup), len(dr67)))
            ccdkeep = np.arange(len(dr6_ccds))
            ccdrem = []
            for dupid in dr67['LSLGA_ID'][dup]:
                keep = np.append(keep, np.where( (dr67['LSLGA_ID'] == dupid) * (dr67['DR'] == 'DR7') )[0])
                ccdrem.append( np.where(dr6_ccds['LSLGA_ID'] == dupid)[0] )
            ccdkeep = np.delete(ccdkeep, np.hstack(ccdrem) )
            dr6_ccds = dr6_ccds[ccdkeep]

        drsample = dr67[keep]
        drsample = drsample[np.argsort(drsample['RA'])]

        print('Writing {} galaxies to {}'.format(len(drsample), drsamplefile))
        drsample.write(drsamplefile, overwrite=True)

        # Now do the CCDs.
        drccds = vstack( (dr6_ccds, dr7_ccds) )
        drccds['IMAGE_FILENAME'] = [ff.strip() for ff in drccds['IMAGE_FILENAME']]
        drccds = drccds[np.argsort(drccds['RA'])]

        print('Writing {} CCDs to {}'.format(len(drccds), drccdsfile))
        drccds.write(drccdsfile, overwrite=True)

        print('Total time for DR6 + DR7 = {:.3f} min.'.format( (time() - tall) / 60 ) )

        # Check
        assert( np.sum(np.isin(drccds['LSLGA_ID'], drsample['LSLGA_ID'])) == len(drccds) )
        #assert( np.sum(np.isin(drsample['LSLGA_ID'], drccds['LSLGA_ID'])) == len(drsample) )
        
if __name__ == '__main__':
    main()

