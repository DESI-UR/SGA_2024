#!/usr/bin/env python

from __future__ import absolute_import, division, print_function

import os, time, warnings
import numpy as np
import numpy.ma as ma
import pandas as pd

from astropy.table import Table

def read_leda(txtfile, zcut=False, nrows=None, nside=64):
    """Read and parse the raw HyperLeda catalog.

    Read 8131378 objects from /Users/ioannis/research/projects/LSLGA/sample/ned-d25min10.txt in 1.550 min.
    Keeping just galaxies leaves 4755411 objects.
    Total time to get coordinates = 0.494 min
    Total time to get magnitudes = 0.100 min
    Total time to get D(25) = 0.030 min
    Total time to get b/a = 0.028 min
    Total time to get PA = 0.029 min
    Writing /Users/ioannis/research/projects/LSLGA/sample/ned-d25min10.fits

    real    5m43.847s
    user    5m17.496s
    sys     1m10.635s

    """

    names = ('pgc', 'objname', 'objtype', 'ra', 'dec', 'type', 'bar', 'ring', 
             'multiple', 'compactness', 't', 'logd25', 'logr25', 
             'pa', 'bt', 'it', 'kt', 'v', 'modbest')
    dtype = {'pgc': np.int64, 'objname': str, 'objtype': str, 'ra': np.float64, 'dec': np.float64,
             'type': str, 'bar': str, 'ring': str, 'multiple': str, 'compactness': str,
             't': str, 'logd25': str, 'logr25': str, 'pa': str,
             'bt': str, 'it': str, 'kt': str, 'v': str, 'modbest': str}
    #dtype = {'pgc': np.int64, 'objname': str, 'objtype': str, 'ra': np.float64, 'dec': np.float64,
    #         'type': str, 'bar': str, 'ring': str, 'multiple': str, 'compactness': str,
    #         't': np.float32, 'logd25': np.float32, 'logr25': np.float32, 'pa': np.float32,
    #         'bt': np.float32, 'it': np.float32, 'kt': np.float32, 'v': np.float32, 'modbest': np.float32}

    t0 = time.time()
    data = pd.read_csv(txtfile, delimiter='|', comment='#', na_values='--',
                       names=names, nrows=nrows, dtype=dtype)
    print('Read {} objects from {} in {:.3f} min.'.format(len(data), txtfile,
                                                          (time.time() - t0) / 60 ) )
    data = data.replace(r'^\s*$', np.nan, regex=True)  # replace blank entries with NaN
    #data = data.replace('--', np.nan, regex=True)

    #data['z'] = np.empty(len(data)) * np.nan
    #hasz = data['v'].notnull()
    #data[data.loc[hasz]['z']] = data.loc[hasz]['v'].astype('f8') / 29979.2458

    if zcut:
        data = data.loc[data['v'].notnull()]

    out = pd.DataFrame()
    out['galaxy'] = data['objname'].str.strip()
    out['pgc'] = data['pgc']
    out['objtype'] = data['objtype'].astype(str).str.strip()
    out['ra'] = data['ra']
    out['dec'] = data['dec']
    out['type'] = data['type'].astype(str).str.strip()
    out['bar'] = data['bar'].astype(str).str.strip()
    out['ring'] = data['ring'].astype(str).str.strip()
    out['multiple'] = data['multiple'].astype(str).str.strip()
    out['compactness'] = data['compactness'].astype(str).str.strip()
    out['t'] = data['t'].astype('f4')
    out['d25'] = 0.1 * 10**data['logd25'].astype('f4') # [arcmin]
    out['r25'] = 0.1 * 10**data['logr25'].astype('f4') # [arcmin]
    out['pa'] = data['pa'].astype('f4')
    out['bt'] = data['bt'].astype('f4')
    out['it'] = data['it'].astype('f4')
    out['kt'] = data['kt'].astype('f4')
    out['modbest'] = data['modbest'].astype('f4')

    # Convert to an astropy Table
    t0 = time.time()
    out = Table.from_pandas(out)
    print('Total time to convert to an astropy Table = {:.3f} min'.format( (time.time() - t0) / 60 ))

    return data, out

if __name__ == '__main__':
    
    NLSGAdir = os.getenv('LSLGA_DIR')
    txtfile = os.path.join(NLSGAdir, 'sample', 'hyperleda-d25min10.txt')
    
    data, out = read_leda(txtfile, zcut=False, nrows=None) # 1000)

    fitsfile = txtfile.replace('.txt', '.fits')
    #fitsfile = os.path.join(NLSGAdir, 'sample', 'large-galaxies-parent.fits')
    print('Writing {}'.format(fitsfile))
    out.write(fitsfile, overwrite=True)


