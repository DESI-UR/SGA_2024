#!/usr/bin/env python3

"""Build the catalogs to be used with get-2024cutouts.

source /global/cfs/cdirs/desi/software/desi_environment.sh main
export PATH=$SGA_CODE_DIR/bin/SGA2024:$PATH
export PYTHONPATH=$SGA_CODE_DIR/py:$PYTHONPATH

build-2024catalogs --outdir-data /pscratch/sd/i/ioannis/SGA2024/catalogs --catalog-type sga2020
build-2024catalogs --outdir-data /pscratch/sd/i/ioannis/SGA2024/catalogs --catalog-type skies --nskies 4096

"""
import os, pdb # for debugging
import numpy as np
import fitsio
from astropy.table import Table

def main():
    """Main wrapper.

    """
    import argparse    
    
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--width', type=int, default=152, help='Default cutout width [pixels].')
    parser.add_argument('--nskies', type=int, default=2**12, help='Number of sky positions to extract.')
    parser.add_argument('--seed', type=int, default=1, help='Random seed for choosing random sky positions.')
    parser.add_argument('--pixscale', type=float, default=0.262, help='Default pixel scale [arcsec/pixel].')
    parser.add_argument('--catalog-type', default='sga2020', choices=['sga2020', 'sga2020-offset', 'sga2024-candidates', 'skies'],
                        type=str, help='Catalog type to build.')
    parser.add_argument('--overwrite', action='store_true', help='Overwrite any existing output files.')
    parser.add_argument('--outdir-data', default='./', type=str, help='Base output data directory.')
    
    args = parser.parse_args()

    if args.catalog_type == 'sga2020':
        cat = Table(fitsio.read('/global/cfs/cdirs/cosmo/data/sga/2020/SGA-2020.fits', 'ELLIPSE',
                                columns=['SGA_ID', 'GALAXY', 'RA', 'DEC', 'D26']))
        d26_pixels = cat['D26'] * 60 / args.pixscale # [pixels]
        d26cut_arcmin = args.width * 1.5 * args.pixscale / 60
        I = np.where(d26_pixels < (args.width * 1.5))[0] # no more than 50% larger than the default cutout width
        print('Selecting {:,d}/{:,d} SGA galaxies with cutout width < 1.5*{} pixels (<{:.2f} arcmin).'.format(
            len(I), len(cat), args.width, d26cut_arcmin))
        out = cat[I]
        outfile = os.path.join(args.outdir_data, 'sga2020-{:.2f}arcmin.fits'.format(d26cut_arcmin))
    elif args.catalog_type == 'sga2020-offset':
        raise NotImplemented
    elif args.catalog_type == 'sga2024-candidates':
        raise NotImplemented
    elif args.catalog_type == 'skies':
        import healpy as hp
        from glob import glob
        #from desitarget.targetmask import desi_mask

        outfile = os.path.join(args.outdir_data, f'skies-{args.nskies}.fits')

        # split positions equally over the footprint
        # https://desidatamodel.readthedocs.io/en/latest/DESI_TARGET/TARG_DIR/DR/VERSION/skies/skies-hp-HP.html#hdu1
        skyfiles = sorted(glob(os.path.join(os.getenv('DESI_TARGET'), 'catalogs', 'dr9', '1.1.1', 'skies', 'skies-hp-*.fits')))
        nskyperhp = np.array_split(np.arange(args.nskies), len(skyfiles))
        nskyperhp = [len(nsky) for nsky in nskyperhp]

        rand = np.random.RandomState(args.seed)
        cols = ['RA', 'DEC', 'DESI_TARGET', 'HPXPIXEL']

        # If we wanted to remove BAD_SKY positions, we would do something like
        # onesky['DESI_TARGET'] & desi_mask.BAD_SKY == 0

        out = []
        for nskyonehp, skyfile in zip(nskyperhp[:3], skyfiles[:3]):
            F = fitsio.FITS(skyfile)
            # NB: earlier version of fitsio don't preserve order
            rows = rand.choice(F['SKY_TARGETS'].get_nrows(), nskyonehp, replace=False)
            rows = np.sort(rows)
            onesky = fitsio.read(skyfile, 'SKY_TARGETS', rows=rows, columns=cols)
            out.append(onesky)
        out = Table(np.hstack(out))
            
    if os.path.isfile(outfile) and not args.overwrite:
        print(f'Skipping existing catalog {outfile}')
    else:
        print(f'Writing {outfile}')
        out.write(outfile, overwrite=True)

if __name__ == '__main__':
    main()
